#!/usr/bin/env bash

# This file is part of CO𝘕CEPT, the cosmological 𝘕-body code in Python.
# Copyright © 2015 Jeppe Mosgaard Dakin.
#
# CO𝘕CEPT is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# CO𝘕CEPT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with CO𝘕CEPT. If not, see http://www.gnu.org/licenses/
#
# The auther of CO𝘕CEPT can be contacted at
# jeppe.mosgaard.dakin(at)post.au.dk
# The latest version of CO𝘕CEPT is available at
# https://github.com/jmd-dk/concept/



# This utility can produce renders of snapshots.
# Run it by invoking the concept script with the
# --util render path
# option, where path is the path to snapshot file
# or a directory containing snapshots.

# Absolute paths to this file and its directory
this_file="$(readlink -f "${BASH_SOURCE[0]}")"
this_dir="$(dirname "${this_file}")"

# Set up error trapping
ctrl_c()
{
    trap : 0
    exit 2
}
abort()
{
    colorprint "An error occurred while using the \"$(basename ${this_file})\" utility!" "red"
    exit 1
}
trap 'ctrl_c' SIGINT
trap 'abort' EXIT
set -e

# Source the concept script
source "${this_dir}/../concept"

# Command-line arguments are exported to this script. Handle flag-arguments
local_flag=""
if [ "${local}" == "True" ]; then
    local_flag="--local"
fi
pure_python_flag=""
if [ "${pure_python_flag}" == "True" ]; then
    pure_python_flag="--pure_python"
fi

# If no parameterfile is supplied, use the one that goes along with this utility
if [ "${params}" == "None" ]; then
    params="${this_file}.params"
fi

# Check for required positional arguments
if [ "$#" != 1 ] || [ -z "$1" ]; then
    colorprint "Error: The $(basename ${this_file}) utility is missing a required argument: path" "red"
fi
path="$1"

# Convert to absolute path
path="$(absolute ${path})"

# Does the path exist?
if [ ! -f "${path}" ] && [ ! -d "${path}" ]; then
    colorprint "Error: The path \"${path}\" does not exist!" "red"
    exit 1
fi

# Get all snapshots in the path
snapshot_filenames="$("${python}" -B -c "import utilities; [print(s) for s in utilities.locate_snapshots('${path}')]")"
snapshot_filenames_pylist="[\"$(echo "${snapshot_filenames}" | sed ':a;N;$!ba;s/\n/\", "/g')\"]"

# Print out which snapshots will be rendered
echo "The following snapshots will be rendered:"
${python} -B -c "from os.path import relpath; [print('\"{}\"'.format(relpath(s, '${concept_dir}') if not relpath(s, '${concept_dir}').startswith('../../') else s)) for s in ${snapshot_filenames_pylist}]"

# Get the boxsize for each snapshot
boxsizes="$("${python}" -B -c "import utilities; [utilities.snapshot_info(s) for s in ${snapshot_filenames_pylist}]" | grep boxsize | awk '{print $2}')"

# For each snapshot, run the CO𝘕CEPT code to create the render
i=0
for snapshot_filename in ${snapshot_filenames}; do
    ((i += 1))
    boxsize=$(echo ${boxsizes} | awk "{print \$${i}}")
    # Make temporary parameter file with every information needed
    printf "
boxsize = ${boxsize}
special_params = {
    'special':           'render',
    'snapshot_filename': '${snapshot_filename}',
                  }
$(cat "${params}")
    " > "${this_file}.params.full"
    # Run CO𝘕CEPT to produce the render
    "${concept}" -m ${main} -n ${nprocs} -p "${this_file}.params.full" -q "{queue}" -w "${walltime}" ${local_flag} ${pure_python_flag}
done

# Cleanup
rm "${this_file}.params.full"

# Exit gracefully
colorprint "$(basename ${this_file}) utility ran successfully" "green"
trap : 0

