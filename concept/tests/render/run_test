#!/usr/bin/env bash

# This file is part of CO𝘕CEPT, the cosmological 𝘕-body code in Python.
# Copyright © 2015-2016 Jeppe Mosgaard Dakin.
#
# CO𝘕CEPT is free software: You can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# CO𝘕CEPT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with CO𝘕CEPT. If not, see http://www.gnu.org/licenses/
#
# The auther of CO𝘕CEPT can be contacted at dakin(at)phys.au.dk
# The latest version of CO𝘕CEPT is available at
# https://github.com/jmd-dk/concept/



# This script runs a test on the render utility.
# It generates a random snapshot and renders it first using 1 CPU and giving
# the render script the exact path to the snapshot (with and without
# specifying a render parameter file). Two copies of this snapshot is then
# placed in a separate directory. Using 2 CPUs, the render script is then
# given the path to this directory, which should produce a render for each
# snapshot. Different render parameters are used for the two calls to the
# render utility script.

# Initialize test environment
this_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
source "${this_dir}/../environment"

# Cleanup from last test run
"${this_dir}/clean"

# Generate snapshots
mkdir -p "${this_dir}/output"
"${concept}" -n 1 -p "${this_dir}/params" -m "${this_dir}/generate_snapshot.py" --pure-python --local
mkdir -p "${this_dir}/output/subdir"
cp "${this_dir}/output/snapshot" "${this_dir}/output/subdir/snapshot_0"
cp "${this_dir}/output/snapshot" "${this_dir}/output/subdir/snapshot_1"

# Generate two different render parameterfiles
echo "
output_bases = {'render': 'render'}
render_select = {'all': True}
render_colors = {'dark matter particles': 'g'}
bgcolor    = '0'
resolution = 234
" > "${this_dir}/render.params_0"
echo "
output_bases = {'render': ''}
render_select = {'all': True}
render_colors = {'dark matter particles': (1, 0.2, 0.3)}
bgcolor    = 'LightYellow'
resolution = 1080
" > "${this_dir}/render.params_1"

# Render the single snapshot without explicitly specifying a render parameter file
"${concept}" -n 1 -u render "${this_dir}/output/snapshot" --local
mv "${this_dir}/output/render_snapshot.png" "${this_dir}/output/render_snapshot_default.png"

# Render the single snapshot by specifying a render parameter file
"${concept}" -n 1 -p "${this_dir}/render.params_0" -u render "${this_dir}/output/snapshot" --local

# Render all (both) snapshots in the subdir, using 2 processes
"${concept}" -n 2 -p "${this_dir}/render.params_1" -u render "${this_dir}/output/subdir" --local

# Analyze the output snapshots
"${concept}" -n 1 -p "${this_dir}/params" -m "${this_dir}/analyze.py" --pure-python --local

# For the spectacularity of it, run a small simulation demonstrating terminal rendering
"${concept}" -n 1 -p "${this_dir}/params" --local

# Finalize test environment
test_done=true source "${this_dir}/../environment"

