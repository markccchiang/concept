# This is an examplFalserameterfile to the COùòïCEPT code,
# containing every parameter.
# Parameters can be specified as any valid Python 3 expression.
# Mathematical as well as NumPy functions and constants are available.
# Physical units may and should be used where applicable.
# Absolute paths defined in the .paths file may be used via the paths dict.
# For more information about the different parameters,
# see chapter 5 of guide.pdf.



# Input/output
IC_file = 'ICs/128'	        # Initial condition snapshot
snapshot_type = 'standard'		# Type of output snapshots
output_dirs = {				# Directories for storing output
    'snapshot' : 'output',
    'powerspec': 'output/128',
    'render'   : 'output',
               }
output_bases = {			# File basenames of output
    'snapshot' : 'snapshot',
    'powerspec': 'poc',
    'render'   : 'render',
                }
output_times = {
    'a': {	# Scale factor values at which to dump output
        'snapshot'       : '',
        'powerspec'      : logspace(log(0.02), log(0.045), 5, base=e),
        'render'         : '',
        'terminal render': '',
          },
    't': {	# Cosmic times at which to dump output
        'snapshot'       : '',
        'powerspec'      : '',
        'render'         : '',
        'terminal render': '',
          },
                }
powerspec_select = {                    # Toggle power spectra computation for each component
    'all': True,
                    }
powerspec_plot_select = {               # Toggle power spectra plotting for each component
    'all': True,
                         }
render_select = {                       # Toggle rendering for each component
    'all': True,
                 }

# Numerical parameters
boxsize          = 64*Mpc		# Linear size of the simulation box
ewald_gridsize   = 64			# Linear gridsize of the grid of Ewald corrections
œÜ_gridsize       = 128			# Linear gridsize of the potential
P3M_scale        = 1.25			# The long/short-range force split scale
P3M_cutoff       = 4.8			# Maximum reach of short-range force
softeningfactors = {			# The amount of gravitational softening for each species
    'dark matter particles': 0.03,
                    }	
Œît_factor        = 0.005		        # The time step size
R_tophat         = 8*Mpc		# Radius of tophat used to compute œÉ

# Cosmological parameters
H0      = 70*km/(s*Mpc)			# The Hubble constant
Œ©r      = 0			        # Density parameter for radiation
Œ©m      = 0.3				# Density parameter for matter
Œ©Œõ      = 0.7				# Density parameter for cosmological constant
a_begin = 0.02				# Scale factor at beginning of simulation

# Graphics
render_colors = {                       # Render color for each type
    'example component': 'lime',
                 }
bgcolor                    = 'black'	# Background color of renders
resolution                 = 1080	# The height and width of the render
liverender                 = ''		# Filename of saved live render
remote_liverender          = ''		# Where to upload the live render
terminal_render_colormap   = 'gnuplot2'	# The colormap to use for the terminal render
terminal_render_resolution = 80		# The width of the terminal render

# Simulation options
kick_algorithms = {			# The algorithm which should be used to kick each species
    'dark matter particles': 'PM',
                   }
fftw_rigor = 'measure'			# Rigor level when acquiring FFTW wisdom

# System of units
unit_length = 'Mpc'
unit_time   = 'Gyr'
unit_mass   = '1e+10*m_sun'

# Debugging options
enable_Ewald     = True			# Enable Ewald corrections
enable_gravity   = True			# Enable gravity generally
enable_Hubble    = True			# Enable Hubble expansion
enable_debugging = False		# Enable debugging mode

