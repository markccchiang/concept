#!/bin/bash

# This script takes in the path of a snapshot or a directory containing snapshots as an argument.
# Given the path to a snapshot, a plot of the snapshot will be rendered and saved into
# utilities/plots. Given a directory path, all snapshots within the directory will be
# plotted and saved this way.

# The name of this test (the directory name)
this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Set up error trapping
ctrl_c()
{
    trap : 0
    exit 2
}
abort()
{
    printf "\e[1m\e[91mAn error occurred during plotting!\e[0m\n" >&2
    exit 1
}
trap 'ctrl_c' SIGINT
trap 'abort' EXIT
set -e

# Argument check
if [ "$#" -gt 1 ]; then
    echo "Too many arguments supplied."
    exit 1
elif [ "$#" -lt 1 ]; then
    echo "You must pass in the path to a snapshot or a directory containing snapshots."
    exit 1
fi
path="$1"
path="${path//[ ]/\\ }"        # Places backslashes before spaces. These are needed when expanding tilde, but they will not persist!
eval path="${path}"            # Expand tilde
path=$(readlink -f "${path}")  # Convert to absolute path
if [ -f "${path}" ]; then
    file_or_dir="file"
elif [ -d "${path}" ]; then
    file_or_dir="dir"
else
    echo "The path $1 does not exist."
    exit 1
fi

# Load paths from the .paths file
curr="${this_dir}"
while [ 1 ]; do
    if [ -f "${curr}/.paths" ]; then
        source "${curr}/.paths"
        break
    fi
    if [ "${curr}" == "/" ]; then
        printf "\e[1m\e[91mCould not find the .paths file!\e[0m\n" >&2
        exit 1
    fi
    curr="`dirname \"${curr}\"`"
done

# Make output folder
cd "${this_dir}"
mkdir -p powerspectra

# Make temporary parameter file
printf "
special = 'powerspectrum'

import numpy as np
# Input/output
IC_file = '${path}'
snapshot_type = '${file_or_dir}'
snapshot_dir = 'output'
snapshot_base = 'snapshot'
snapshot_times = (1, )
powerspec_dir = '${this_dir}/powerspectra'
powerspec_base = 'power'
powerspec_times = (1, )

# Numerical parameters
boxsize = 64/0.7*Mpc
ewald_gridsize = 1
PM_gridsize = 512
P3M_scale = 1
P3M_cutoff = 1
softeningfactors = {'dark matter': 1,
                    'dark energy': 1,
                    }
Δt_factor = 1

# Cosmological parameters
H0 = 1
Ωm = 1
ΩΛ = 1
a_begin = 0.02

# Graphics
frame_dir = ''
liveframe=''
image_format='png'
color = (0.70, 0.97, 0.37)
bgcolor = 'white'
resolution = 1080
remote_liveframe=''
protocol = ''
framespace = 1

# Simulation options
kick_algorithms = {}
use_Ewald = False
" > "${this_dir}/power.params"


"${run}" -n 1 -p "${this_dir}/power.params" --local

# Plot complete. Deactivate trap before exiting
trap : 0

