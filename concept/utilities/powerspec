#!/usr/bin/env bash

# This file is part of COùòïCEPT, the cosmological ùòï-body code in Python.
# Copyright ¬© 2015‚Äì2018 Jeppe Mosgaard Dakin.
#
# COùòïCEPT is free software: You can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# COùòïCEPT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with COùòïCEPT. If not, see http://www.gnu.org/licenses/
#
# The author of COùòïCEPT can be contacted at dakin(at)phys.au.dk
# The latest version of COùòïCEPT is available at
# https://github.com/jmd-dk/concept/



# This utility can produce powerspectra of snapshots.
# You can run this file directly as
# utilities/powerspec paths
# or invoke it via the concept script as
# ./concept -u powerspec paths
# In both cases, paths are paths to snapshot files
# or directories containing snapshot files.



# Absolute paths to this file and its directory
this_file="$(readlink -f "${BASH_SOURCE[0]}")"
this_dir="$(dirname "${this_file}")"

# Source the concept script
source "${this_dir}/../concept"

# Set up error trapping
ctrl_c()
{
    trap : 0
    exit 2
}
abort()
{
    colorprint "An error occurred while using the \"$(basename "${this_file}")\" utility!" "red"
    exit 1
}
if [ "${called_from_concept}" == "True" ]; then
    trap 'ctrl_c' SIGINT
    trap 'abort' EXIT
    set -e
fi

# Use Python's argparse module to handle command-line arguments
argparse_finished="no"
args=$("${python}" -B -c "
import argparse, sys
# Setup command-line arguments
parser = argparse.ArgumentParser(prog='$(basename "${this_file}")',
                                 description='Run the COùòïCEPT $(basename "${this_file}") utility')
parser.add_argument('paths',
                    nargs='+',
                    help='paths to snapshots or directories of snapshots',
                    )
# Enables Python to write directly to screen (stderr)
# in case of help request.
stdout_copy = sys.stdout
sys.stdout = sys.stderr
# Now do the actual argument parsing,
# including writing out the help message.
if '${called_from_concept}' == 'True':
    # Called from concept - Throw exception on illegal args
    args = parser.parse_args()
else:
    # Called directly - Allow what appears to be illegal args
    # (these might be known to the concept script).
    args, unknown_args = parser.parse_known_args()
# Reset stdout
sys.stdout = stdout_copy
# Print out the arguments.
# These will be captured in the Bash 'args' variable.
print('argparse_finished=yes')
print('paths=({})'.format(' '.join(['\"{}\"'.format(paths) for paths in args.paths])))
" "$@" || :)
# Evaluate the handled arguments into this scope
eval "${args}"
# Exit if argparse exited without finishing
if [ "${argparse_finished}" != "yes" ]; then
    trap : 0
    exit 0
fi

# If not called indirectly through the concept script,
# call the concept script now.
if [ "${called_from_concept}" != "True" ]; then
    "${concept}" -u "${this_file}" "$@"
    trap : 0
    exit 0
fi

# If no parameter file is supplied,
# use the one that goes along with this utility.
if [ "${params}" == "None" ]; then
    params="${this_file}.params"
fi

# Convert to absolute paths
for i in ${!paths[@]}; do
    paths[${i}]="$(absolute_path "${paths[${i}]}" "${workdir}")"
done

# Get filenames of snapshots and create matching (temporary) parameter files
info="$("${concept}" -p "${params}"                             \
                     ${interactive_flag}                        \
                     --local                                    \
                     ${no_optimization_flag}                    \
                     ${pure_python_flag}                        \
                     ${unsafe_build_flag}                       \
                     -u info                                    \
                         "$(bash_array2python_list paths[@])"   \
                         --generate-params "${this_dir}/params" \
        )"
snapshot_filenames="$(echo "${info}" | grep -x 'Parameters.*' | grep -o '".*"')"
snapshot_params_filenames="$(echo "${info}"                                           \
                             | grep -x 'The above parameters have been written to .*' \
                             | grep -o '".*"')"
snapshot_params_filenames="${snapshot_params_filenames//\"/}"

# Print out the snapshots of which a power spectrum will be computed
N_snapshots="$(echo "${snapshot_filenames}" | wc -l)"
if [ ${N_snapshots} == 1 ]; then
    echo "A power spectrum will be produced of the following snapshot:"
else
    echo "Power spectra will be produced of the following snapshots:"
fi
echo "${snapshot_filenames}"

# For each snapshot, run the COùòïCEPT code to create the power spectrum
jobids=()
for ((i = 1; i <= N_snapshots; i += 1)); do
    # Filename of the parameter file to create and use
    params_filename="${this_dir}/params/$(basename "${this_file}").params$((i - 1))"
    # Get the i'th snapshot and generated parameter file
    snapshot_filename="$(echo "${snapshot_filenames}" | sed "${i}q;d")"
    snapshot_params_filename="$(echo "${snapshot_params_filenames}" | sed "${i}q;d")"
    # Make temporary parameter file with everything needed
    printf "
# The special_params dict, specifying details of the utility run
special_params = {
    'special': '$(basename "${this_file}")',
    'snapshot_filename': ${snapshot_filename},
                  }
# Set the path to the parameter file to be the path to the actual
# parameter file specified by the user, not this autogenerated
# parameter file.
params_path_ori = paths['params']
paths['params'] = '${params}'
# Autogenerated parameters
$(cat "${snapshot_params_filename}")
###################
# User parameters #
###################
$(cat "${params}")
##########################
# End of user parameters #
##########################
# Reinsert original path to the parameter file
paths['params'] = params_path_ori
" > "${params_filename}"
    # Cleanup
    rm -f "${snapshot_params_filename}"
    # Function that calls the concept script with appropriate arguments.
    # Note that the submitted jobs should not be watched at this time.
    call_concept()
    {
        "${concept}" -m "${main}"            \
                     -n  ${nprocs}           \
                     -p "${params_filename}" \
                     -q "${queue}"           \
                     -w "${walltime}"        \
                     ${interactive_flag}     \
                     ${local_flag}           \
                     ${no_optimization_flag} \
                     --no-watch              \
                     ${pure_python_flag}     \
                     ${unsafe_build_flag}
    }
    # Run COùòïCEPT to produce the powerspecrum
    if [ "${remote}" == "True" ]; then
        concept_output="$(call_concept)"
        echo "${concept_output}"
        # Get jobid
        jobid="$(echo "${concept_output}" | grep "Job .* submitted to queue" 2>/dev/null || :)"
        if [ -n "${jobid}" ]; then
            jobid="$(echo "${jobid}" | awk '{print $2}')"
            jobids+=("${jobid}")
        fi
    elif [ "${remote}" == "False" ]; then
        call_concept
    else
        colorprint "Variable \"remote\" not properly set" "red"
        exit 1
    fi
done

# Deactivate traps before exiting
trap : 0

# Watch remotely submitted jobs in submission order
if [ ${#jobids[@]} -gt 0 ] && [ "${no_watch}" == "False" ]; then
    if [ ${#jobids[@]} -gt 1 ]; then
        printf "\nYou can now kill (Ctrl-C) this script without cancelling the jobs\n"
        printf "\nWill now watch the submitted jobs\n\n"
    else
        printf "\nYou can now kill (Ctrl-C) this script without cancelling the job\n"
        printf "\nWill now watch the submitted job\n\n"
    fi
    for jobid in "${jobids[@]}"; do
        "${concept}" -u watch ${jobid}
        echo
    done
fi

# Exit gracefully
colorprint "$(basename "${this_file}") utility ran successfully" "green"

