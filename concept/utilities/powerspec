#!/usr/bin/env bash

# This file is part of CONCEPT, the cosmological N-body code in Python.
# Copyright (C) 2015 Jeppe Mosgard Dakin.
#
# CONCEPT is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# CONCEPT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with CONCEPT. If not, see http://www.gnu.org/licenses/
#
# The auther of CONCEPT can be contacted at
# jeppe.mosgaard.dakin(at)post.au.dk
# The latest version of CONCEPT is available at
# https://github.com/jmd-dk/concept/



# Run this script directly to produce powerspectra of snapshots.
# This script has one required argument; the path to either a snapshot file
# or a directory containing snapshots. In the latter case, powerspectra will
# be produced of all snapshots in the directory.

# Absolute paths to this file and its directory
this_file="$(readlink -f "${BASH_SOURCE[0]}")"
this_dir="$(dirname "${this_file}")"

# Set up error trapping
ctrl_c()
{
    trap : 0
    exit 2
}
abort()
{
    colorprint "An error occurred while using the \"$(basename ${this_file})\" utility!" "red"
    exit 1
}
trap 'ctrl_c' SIGINT
trap 'abort' EXIT
set -e

# Source the run script
source "${this_dir}/../run"

# Default values of command-line arguments
nprocs=1
params="${this_file}.params"

# Use Python's argparse module to handle command-line arguments
args=($(${python} -B -c "
import argparse
import sys
from os.path import basename, dirname
# Enables Python to write directly to screen when asked for help
help_req = False
if any(h in sys.argv for h in ['-h', '--he', '--hel', '--help']):
    sys.stdout = sys.stderr
    help_req = True
# Set the filename of the script
sys.argv[0] = '${this_file}'
# Setup command-line arguments
parser = argparse.ArgumentParser(description='Run the CONCEPT code.')
parser.add_argument('path',
                    help='path to snapshot or directory of snapshots',
                    type=str,
                    )
parser.add_argument('--local',
                    help='Force the run to be done locally, without submitting it via PBS',
                    default=False,
		    action='store_true',
                    )
parser.add_argument('-n', '--nprocs',
                    help='number of processes',
                    type=int,
                    default=${nprocs},
                    )
parser.add_argument('-p', '--params',
                    help='parameterfile to use',
                    default='${params}',
                    )
args = parser.parse_args()
# Print out the arguments.
# These will be captured in the bash 'args' variable
print(int(help_req),
      args.path,
      args.nprocs,
      args.params,
      int(args.local),
      )
" "$@"))
help_req="${args[0]}"
path="${args[1]}"
nprocs="${args[2]}"
params="${args[3]}"
local="${args[4]}"
if [ -z "${help_req}" ] || [ "${help_req}" == 1 ]; then
    # Help requested and given. Exit
    trap : 0
    exit 0
fi
if [ "${#args[@]}" -ne 5 ]; then
    colorprint "Error: Not every command line argument was gracefully dealt with!" "red"
    exit 1
fi

# Convert the supplied paths to an absolute paths
path="$(absolute ${path})"
params="$(absolute ${params})"

# Get all snapshots in the path
snapshot_filenames="$("${python}" -B -c "import special; [print(s) for s in special.locate_snapshots('${path}')]")"
snapshot_filenames_pylist="[\"$(echo "${snapshot_filenames}" | sed ':a;N;$!ba;s/\n/\", "/g')\"]"

# Print out which snapshots will be used
echo "Powerspectra will be produced of the following snapshots:"
${python} -B -c "from os.path import relpath; [print('\"{}\"'.format(relpath(s, '${concept_dir}') if not relpath(s, '${concept_dir}').startswith('../../') else s)) for s in ${snapshot_filenames_pylist}]"

# Get the boxsize in each snapshot
boxsizes="$("${python}" -B -c "import special; [print('boxsize =', special.snapshot_info(s)['params']['boxsize']) for s in ${snapshot_filenames_pylist}]")"
boxsizes=$(echo "${boxsizes}" | grep "boxsize = [0-9.]*" | awk '{print $3}')

# For each snapshot, run the CONCEPT code to create the powerspectrum
local_flag=""
if [ ${local} == 1 ]; then
    local_flag="--local"
fi
i=0
for snapshot_filename in ${snapshot_filenames}; do
    ((i += 1))
    boxsize=$(echo ${boxsizes} | awk "{print \$${i}}")
    # Make temporary parameter file with every information needed
    printf "
boxsize = ${boxsize}
use_PM = True
special_params = {
    'special':           'powerspec',
    'snapshot_filename': '${snapshot_filename}',
                  }
$(cat "${params}")
    " > "${this_file}.params.full"
    # Run CONCEPT to produce the powerspectrum
    "${run}" -n ${nprocs} -p "${this_file}.params.full" ${local_flag}
done

# Cleanup
rm "${this_file}.params.full"

# Exit gracefully
trap : 0

