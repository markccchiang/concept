#!/usr/bin/env bash

# This file is part of CO𝘕CEPT, the cosmological 𝘕-body code in Python.
# Copyright © 2015 Jeppe Mosgaard Dakin.
#
# CO𝘕CEPT is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# CO𝘕CEPT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with CO𝘕CEPT. If not, see http://www.gnu.org/licenses/
#
# The auther of CO𝘕CEPT can be contacted at
# jeppe.mosgaard.dakin(at)post.au.dk
# The latest version of CO𝘕CEPT is available at
# https://github.com/jmd-dk/concept/


# This script performs a drift test of the CO𝘕CEPT code by comparison with
# GADGET. ICs are generated, containing 4 particles placed symmetrically
# in the yz-plane so that no net forces exist (due to mirror images). A
# initial velocity in the x-direction is given. The particles will pass
# through the periodic edge of the box during the simulation.

# Initialize test environment
this_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
source "${this_dir}/../environment"

# Cleanup from last test run
"${this_dir}/clean"

# Create list of output times, used by both CO𝘕CEPT and GADGET
"${python}" -c "import numpy as np; np.savetxt('${this_dir}' + '/outputlist', np.linspace(0.03, 1, 25))"

# Create the Ewald grid using Cython, if it does not already exist
# (for fast IC generation).
ewald_gridsize=$(grep -o "ewald_gridsize[ =0-9]*" "${this_dir}/params" | awk '{printf $NF}')
if [ ! -f "${concept_dir}/.ewald_gridsize=${ewald_gridsize}.hdf5" ]; then
    "${run}" -n 1 -p "${this_dir}/params_ewald" --local
fi

# Generate ICs
"${run}" -n 1 -p "${this_dir}/params" -m "${this_dir}/generate_IC.py" --pure-python --local

# Run the CO𝘕CEPT code on the generated ICs
"${run}" -n 1 -p "${this_dir}/params" --local

# Create an edited version of Makefile_gadget with correct parth information
# and replace the Makefile in the GADGET2 directory with this edited version.
cp "${this_dir}/Makefile_gadget" "${this_dir}/Makefile_gadget_edited"
sed -i "/^ *CC= / s/ [^# ]/ ${mpicc//\//\\/}/" "${this_dir}/Makefile_gadget_edited"
path="${mpi_dir}/include"
sed -i "/^ *MPI_INCL= / s/ [^# ]/ \"-I${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\"/" "${this_dir}/Makefile_gadget_edited"
path="${mpi_dir}/lib"
sed -i "/^ *MPI_LIBS= / s/ [^# ]/ \"-L${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\"/" "${this_dir}/Makefile_gadget_edited"
path="${gsl_dir}/include"
sed -i "/^ *GSL_INCL= / s/ [^# ]/ \"-I${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\"/" "${this_dir}/Makefile_gadget_edited"
path="${gsl_dir}/lib"
sed -i "/^ *GSL_LIBS= / s/ [^# ]/ \"-L${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\"/" "${this_dir}/Makefile_gadget_edited"
path="${fftw_for_gadget_dir}/include"
sed -i "/^ *FFTW_INCL= / s/ [^# ]/ \"-I${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\"/" "${this_dir}/Makefile_gadget_edited"
path="${fftw_for_gadget_dir}/lib"
sed -i "/^ *FFTW_LIBS= / s/ [^# ]/ \"-L${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\"/" "${this_dir}/Makefile_gadget_edited"

# Make a local copy of the files in the Gadget2 directory and copy the edited Makefile
Gadget2_local_dir="${this_dir}/Gadget2_local"
mkdir -p "${Gadget2_local_dir}"
find "${Gadget2_dir}" -maxdepth 1 -type f -exec cp '{}' "${Gadget2_local_dir}" \;
cp "${this_dir}/Makefile_gadget_edited" "${Gadget2_local_dir}/Makefile"

# Build Gadget and run simulation based on the ICs
(cd "${Gadget2_local_dir}" && make clean && make && "${mpiexec}" -n 1 "${Gadget2_local_dir}/Gadget2" ../params_gadget)  # It is crucial to use a relative path as the path has a max allowed length in GADGET

# Analyze the output snapshots
"${run}" -n 1 -p "${this_dir}/params" -m "${this_dir}/analyze.py" --pure-python --local

# Copy the tabulated Ewald corrections to the Gadget2 directory if it does not
# already exists there, to save time later.
if [ ! -f "${Gadget2_dir}/ewald_spc_table_64.dat" ]; then
    cp "${Gadget2_local_dir}/ewald_spc_table_64.dat" "${Gadget2_dir}/ewald_spc_table_64.dat"
fi

# Finalize test environment
test_done=true source "${this_dir}/../environment"

