#!/usr/bin/env bash

# This file is part of CO𝘕CEPT, the cosmological 𝘕-body code in Python.
# Copyright © 2015-2017 Jeppe Mosgaard Dakin.
#
# CO𝘕CEPT is free software: You can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# CO𝘕CEPT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with CO𝘕CEPT. If not, see http://www.gnu.org/licenses/
#
# The auther of CO𝘕CEPT can be contacted at dakin(at)phys.au.dk
# The latest version of CO𝘕CEPT is available at
# https://github.com/jmd-dk/concept/



# This utility will update the CO𝘕CEPT source files.
# You can run this file directly as
# utilities/update
# or invoke it via the concept script as
# ./concept --util update



# Absolute paths to this file and its directory
this_file="$(readlink -f "${BASH_SOURCE[0]}")"
this_dir="$(dirname "${this_file}")"

# Source the concept script
source "${this_dir}/../concept"

# Set up error trapping
ctrl_c()
{
    trap : 0
    exit 2
}
abort()
{
    colorprint "An error occurred while using the \"$(basename "${this_file}")\" utility!" "red"
    exit 1
}
if [ "${called_from_concept}" == "True" ]; then
    trap 'ctrl_c' SIGINT
    trap 'abort' EXIT
    set -e
fi

# Use Python's argparse module to handle command-line arguments
args=$("${python}" -B -c "
import argparse, sys
# Setup command-line arguments (actually, this script takes no arguments)
parser = argparse.ArgumentParser(prog='$(basename "${this_file}")',
                                 description='Run the CO𝘕CEPT $(basename "${this_file}") utility')
# Enables Python to write directly to screen (stderr)
# in case of help request.
stdout_copy = sys.stdout
sys.stdout = sys.stderr
# Now do the actual argument parsing,
# including writing out the help message.
if '${called_from_concept}' == 'True':
    # Called from concept - Throw exception on illegal args
    args = parser.parse_args()
else:
    # Called directly - Allow what appears to be illegal args
    # (these might be known to the concept script).
    args, unknown_args = parser.parse_known_args()
# Reset stdout
sys.stdout = stdout_copy
# Print out the arguments.
# These will be captured in the Bash 'args' variable.
print('argparse_finished=yes')
" "$@" || :)
# Evaluate the handled arguments into this scope
eval "${args}"
# Exit if argparse exited without finishing
if [ "${argparse_finished}" != "yes" ]; then
    echo "exiting after argparse..."
    trap : 0
    exit 0
fi

# If not called indirectly through the concept script,
# call the concept script now.
if [ "${called_from_concept}" != "True" ]; then
    "${concept}" --util "${this_file}" "$@"
    trap : 0
    exit 0
fi

# Read in the entire content of the installer script
installer_content="$(cat "${installer}")"

# Borrow some functions from the install script.
# Sourcing is no good here, as we are not interested in
# actually running the installer script.
installer_functions=("set_package_names"             \
                     "set_package_manager_and_names" \
                     "check_system_dependency"       \
                     "extract"                       \
                     "download"                      \
                     )
for installer_function in "${installer_functions[@]}"; do
    function_definition="$("${python}" -B -c "
import re, sys
installer = sys.argv[1]
with open(installer, 'r', encoding='utf-8') as file:
    installer_content = file.read()
print(re.search(r'${installer_function}\(\).*?\n}', installer_content, flags=re.DOTALL).group())
" "${installer}")"
eval "${function_definition}"
done

# Create dummy functions called by the other functions
dummy_functions=("error"          \
                 "heading"        \
                 "set_status"     \
                 "disable_status" \
                 "enable_status"  \
                 )
for dummy_function in "${dummy_functions[@]}"; do
eval "
${dummy_function}()
{
    :
}"
done

# Check for needed system commands
set_package_manager_and_names
check_system_dependency "gzip" "${gzip_package}"
check_system_dependency "tar"  "${tar_package}"
check_system_dependency "wget" "${wget_package}"

# Make backup of the current CO𝘕CEPT source code and auxiliary files
# (but not any installed software dependencies).
backup_dir="${top_dir}/concept_backup"
rm -rf "${backup_dir}"
mkdir "${backup_dir}"
for f in "${top_dir}/"*; do
    if [ -f "${f}" ]; then
        cp "${f}" "${backup_dir}/"
    fi
done
cp "${top_dir}.paths" "${backup_dir}/"
cp -r "${top_dir}/concept" "${backup_dir}/"

# Download and extract CO𝘕CEPT
concept_url="https://github.com/jmd-dk/concept/archive/master.tar.gz"
rm -rf "${top_dir}/tmp"
mkdir "${top_dir}/tmp"
download "CONCEPT"
extract "CONCEPT"

# Check whether the installer has been updated
installer_updated_content="$(cat "${top_dir}/tmp/concept/"*"/installer")"
installer_updated="yes"
if [ "${installer_content}" == "${installer_updated_content}" ]; then
    installer_updated="no"
fi

# Move particular files from the master directory
for filename in "guide.pdf" "installer" "README.md" "thesis.pdf"; do
    mv "${top_dir}/tmp/concept/"*"/${filename}" "${top_dir}"
done

# Move the new update script to another location
mv "${top_dir}/tmp/concept/"*"/concept/utilities/update" "${utilities_dir}/update_new"

# Copy all files from the concept directory
cp -r "${top_dir}/tmp/concept/"*"/concept/"* "${concept_dir}/"

# Cleanup
rm -rf "${top_dir}/tmp"

# Write out success message
printf "
A backup of the existing CO𝘕CEPT source code has been placed in
\"${backup_dir}\"
"
colorprint "$(basename "${this_file}") utility ran successfully" "green"

# Notify the user if the installer has been updated
if [ "${installer_updated}" == "yes" ]; then
    colorprint "Warning: The installer script has undergone an update.\n\
This could mean that your CO𝘕CEPT environment is not\n\
up to date with your CO𝘕CEPT source code" "red"
fi

# For graceful exit
trap : 0

# As the very last thing, overwrite this file
mv "${utilities_dir}/update_new" "${utilities_dir}/update"

