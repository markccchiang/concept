#!/usr/bin/env bash

# This file is part of COùòïCEPT, the cosmological ùòï-body code in Python.
# Copyright ¬© 2015-2016 Jeppe Mosgaard Dakin.
#
# COùòïCEPT is free software: You can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# COùòïCEPT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with COùòïCEPT. If not, see http://www.gnu.org/licenses/
#
# The auther of COùòïCEPT can be contacted at dakin(at)phys.au.dk
# The latest version of COùòïCEPT is available at
# https://github.com/jmd-dk/concept/



# This utility can produce renders of snapshots.
# You can run this file directly as
# utilities/render path
# or invoke it via the concept script as
# ./render --util render path
# In both cases, path is the path to a snapshot file
# or a directory containing snapshot files.



# Absolute paths to this file and its directory
this_file="$(readlink -f "${BASH_SOURCE[0]}")"
this_dir="$(dirname "${this_file}")"

# Source the concept script
source "${this_dir}/../concept"

# Set up error trapping
ctrl_c()
{
    trap : 0
    exit 2
}
abort()
{
    colorprint "An error occurred while using the \"$(basename ${this_file})\" utility!" "red"
    exit 1
}
if [ "${called_from_concept}" == "True" ]; then
    trap 'ctrl_c' SIGINT
    trap 'abort' EXIT
    set -e
fi

# Use Python's argparse module to handle command-line arguments
args=$("${python}" -c "
import argparse, sys
# Setup command-line arguments
parser = argparse.ArgumentParser(prog='$(basename ${this_file})',
                                 description='Run the COùòïCEPT $(basename ${this_file}) utility')
parser.add_argument('path',
                    help='path to snapshot or directory of snapshots',
                    )
# Enables Python to write directly to screen (stderr)
# in case of help request.
stdout_copy = sys.stdout
sys.stdout = sys.stderr
# Now do the actual argument parsing,
# including writing out the help message.
if '${called_from_concept}' == 'True':
    # Called from concept - Through exception on illegal args
    args = parser.parse_args()
else:
    # Called directly - Allow what appears to be illegal args
    # (these might be known to the concept script).
    args, unknown_args = parser.parse_known_args()
# Reset stdout
sys.stdout = stdout_copy
# Print out the arguments.
# These will be captured in the Bash 'args' variable.
print(  ' argparse_finished=yes'
      + '; path=\"{}\"'.format(args.path)
      )
" "$@")
# Evaluate the handled arguments into this scope
eval "${args}"
# Exit if argparse exited without finishing
if [ "${argparse_finished}" != "yes" ]; then
    trap : 0
    exit 0
fi

# If not called indirectly through the concept script,
# call the concept script now.
if [ "${called_from_concept}" != "True" ]; then
    "${this_dir}/../concept" --util "${this_file}" "$@"
    trap : 0
    exit 0
fi

# If no parameterfile is supplied,
# use the one that goes along with this utility.
if [ "${params}" == "None" ]; then
    params="${this_file}.params"
fi

# Convert to absolute path
path="$(absolute_path "${path}" "${workdir}")"

# Get filenames of snapshots and create matching (temporary) parameter files
if [ -z "${pure_python_flag}" ]; then
    # Make now, as the output of the next concept call will be captured
    if ls "${concept_dir}/"*.so_ > /dev/null 2>&1; then
        (cd "${concept_dir}" && for f in *.so_; do
                                    mv "${f}" "${f%.so_}.so"
                                done
         )
    fi
    (cd "${concept_dir}" && make)
fi
info="$("${concept}" --local ${pure_python_flag} --util info --generate-paramsfile "${path}")"
snapshot_filenames="$(echo "${info}" | grep -x Parameters.* | grep -o '".*"')"
snapshot_params_filenames="$(echo "${info}" | grep -x '".*"')"
snapshot_params_filenames="${snapshot_params_filenames//\"/}"

# Print out the snapshots which will be rendered
N_snapshots="$(echo "${snapshot_filenames}" | wc -l)"
if [ ${N_snapshots} == 1 ]; then
    echo "A render will be produced of the following snapshot:"
else
    echo "Renders will be produced of the following snapshots:"
fi
echo "${snapshot_filenames}"

# For each snapshot, run the COùòïCEPT code to create the render
for ((i = 1; i <= N_snapshots; i += 1)); do
    # Get the i'th snapshot and generated parameter file
    snapshot_filename="$(echo "${snapshot_filenames}" | sed "${i}q;d")"
    snapshot_params_filename="$(echo "${snapshot_params_filenames}" | sed "${i}q;d")"
    # Make temporary parameter file with every information needed
    printf "special_params = {
    'special':           '$(basename ${this_file})',
    'snapshot_filename': ${snapshot_filename},
                  }
$(cat "${snapshot_params_filename}")
$(cat "${params}")
" > "${this_file}.params.full"
    # Cleanup
    rm -f "${snapshot_params_filename}"
    # Run COùòïCEPT to produce the render
    "${concept}" -m "${main}"                  \
                 -n  ${nprocs}                 \
                 -p "${this_file}.params.full" \
                 -q "${queue}"                 \
                 -w "${walltime}"              \
                 ${local_flag} ${pure_python_flag}
done

# Cleanup
rm -f "${this_file}.params.full"

# Exit gracefully
colorprint "$(basename ${this_file}) utility ran successfully" "green"
trap : 0

