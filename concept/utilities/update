#!/usr/bin/env bash

# This file is part of COùòïCEPT, the cosmological ùòï-body code in Python.
# Copyright ¬© 2015 Jeppe Mosgaard Dakin.
#
# COùòïCEPT is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# COùòïCEPT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with COùòïCEPT. If not, see http://www.gnu.org/licenses/
#
# The auther of COùòïCEPT can be contacted at
# jeppe.mosgaard.dakin(at)post.au.dk
# The latest version of COùòïCEPT is available at
# https://github.com/jmd-dk/concept/



# This utility will update the COùòïCEPT source files.
# Run it directly or by invoking the concept script with the
# --util update
# option.

# Absolute paths to this file and its directory
this_file="$(readlink -f "${BASH_SOURCE[0]}")"
this_dir="$(dirname "${this_file}")"

# Set up error trapping
ctrl_c()
{
    trap : 0
    exit 2
}
abort()
{
    colorprint "An error occurred while using the \"$(basename ${this_file})\" utility!" "red"
    exit 1
}
trap 'ctrl_c' SIGINT
trap 'abort' EXIT
set -e

# Source the concept script
source "${this_dir}/../concept"

# Read in the entire content of the installer script
installer_content="$(cat "${installer}")"

# Check for unrequired positional arguments
if [ "$#" -gt 0 ]; then
    badvars=""
    for badvar in ${@:1}; do
        if [ -n "${badvar}" ]; then
            badvars="${badvars}, \"${badvar}\""
        fi
    done
    badvars="${badvars:2}"
    colorprint "Warning: The following arguments will be ignored by the $(basename ${this_file}) utility:" "red"
    colorprint "${badvars}" "red"
fi

# Borrow some functions from the install script.
# Sourcing is no good here, as we are not interested in
# actually running the installer script.
installer_functions=("set_package_names" "set_package_manager_and_names" "check_system_dependency" "extract" "download")
for installer_function in "${installer_functions[@]}"; do
function_definition="$("${python}" -B -c "
import re, sys
print(re.search(r'${installer_function}\(\).*?\n}', sys.argv[1], flags=re.DOTALL).group())
" "${installer_content}")"
eval "${function_definition}"
done

# Create dummy functions called by the other functions
dummy_functions=("error" "heading" "set_status" "disable_status" "enable_status")
for dummy_function in "${dummy_functions[@]}"; do
eval "
${dummy_function}()
{
    :
}"
done

# Check for needed system commands
set_package_manager_and_names
check_system_dependency "gzip" "${gzip_package}"
check_system_dependency "tar"  "${tar_package}"
check_system_dependency "wget" "${wget_package}"

# Make backup of the current COùòïCEPT source code
backup_dir="${top_dir}/concept_backup"
rm -rf "${backup_dir}"
mkdir "${backup_dir}"
cp -f "${top_dir}/installer" "${top_dir}/README.md" "${top_dir}/.paths" "${backup_dir}"
mkdir "${backup_dir}/concept"
cp -r "${tests_dir}"     "${backup_dir}/concept"
cp -r "${utilities_dir}" "${backup_dir}/concept"
cp "${concept_dir}/"*    "${backup_dir}/concept" 2> /dev/null || :

# Download and extract COùòïCEPT
concept_url="https://github.com/jmd-dk/concept/archive/master.tar.gz"
rm -rf "${top_dir}/tmp"
mkdir "${top_dir}/tmp"
download "CONCEPT"
extract "CONCEPT"

# Check whether the installer has been updated
installer_updated_content="$(cat "${top_dir}/tmp/concept/"*"/installer")"
installer_updated="yes"
if [ "${installer_content}" == "${installer_updated_content}" ]; then
    installer_updated="no"
fi

# Move particular files from the master directory
for filename in "guide.pdf" "installer" "README.md"; do
    mv "${top_dir}/tmp/concept/"*"/${filename}" "${top_dir}"
done

# Move the new update script to another location
mv "${top_dir}/tmp/concept/"*"/concept/utilities/update" "${utilities_dir}/update_new"

# Copy all files from the concept directory
cp -r "${top_dir}/tmp/concept/"*"/concept/"* "${concept_dir}/"

# Cleanup
rm -rf "${top_dir}/tmp"

# Write out success message
printf "
A backup of the existing ${terminal_CONCEPT} source code has been placed in
\"${backup_dir}\"
"
colorprint "CONCEPT successfully updated" "green"

# Notify the user if the installer has been updated
if [ "${installer_updated}" == "yes" ]; then
    colorprint "Warning: The installer script has undergone an update." "red"
    colorprint "This could mean that your CONCEPT environment is not" "red"
    colorprint "up to date with your CONCEPT source code" "red"
fi

# For graceful exit
trap : 0

# As the very last thing, overwrite this file
mv "${utilities_dir}/update_new" "${utilities_dir}/update"

