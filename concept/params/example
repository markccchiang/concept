# This is an example parameterfile to the COùòïCEPT code,
# containing every parameter.
# Parameters can be specified as any valid Python 3 expression.
# Mathematical as well as NumPy functions and constants are available.
# Physical units may and should be used where applicable.
# Absolute paths defined in the .paths file may be used via the paths dict.
# For more information about the different parameters,
# see chapter 5 of guide.pdf.



# Input/output
IC_file = 'ICs/example.hdf5'		# Initial condition snapshot
snapshot_type = 'standard'		# Type of output snapshots
output_dirs = {				# Directories for storing output
    'snapshot' : 'output',
    'powerspec': 'output',
    'render'   : 'output',
               }
output_bases = {			# File basenames of output
    'snapshot' : 'snapshot',
    'powerspec': 'powerspec_fluid',
    'render'   : 'render_fluid',
                }
output_times = {			# Scale factor values at which to dump output
    'a': {
        'snapshot'       : '',
        'powerspec'      : '',
        'render'         : '',
        'terminal render': '',
          },
    't': {
        'snapshot'       : 13*Gyr,
        'powerspec'      : '',
        'render'         : '',
        'terminal render': '',
          },
                }
powerspec_select = {                    # Toggle power spectra computation for each component
    'all': True,
                    }
powerspec_plot_select = {               # Toggle power spectra plotting for each component
    'all': True,
                         }
render_select = {                       # Toggle rendering for each component
    'all': True,
                 }

# Numerical parameters
boxsize          = 16*Mpc		# Linear size of the simulation box
ewald_gridsize   = 8			# Linear gridsize of the grid of Ewald corrections
œÜ_gridsize       = 32			# Linear gridsize of the potential
P3M_scale        = 1.25			# The long/short-range force split scale
P3M_cutoff       = 4.8			# Maximum reach of short-range force
softeningfactors = {			# The amount of gravitational softening for each species
    'dark matter particles': 0.03,
                    }	
Œît_factor        = 0.01			# The time step size
R_tophat         = 8*Mpc		# Radius of tophat used to compute œÉ

# Cosmological parameters
H0      = 70*km/(s*Mpc)			# The Hubble constant
Œ©m      = 0.3				# Density parameter for matter
Œ©Œõ      = 0.7				# Density parameter for dark energy
a_begin = 0.02				# Scale factor at beginning of simulation

# Graphics
render_colors = {                       # Render color for each type
    'example component': 'lime',
    'GADGET fluid':   'lime',
    'GADGET halos':   'lime',
                 }
bgcolor             = 'black'		# Background color of renders
resolution          = 1080		# The height and width of the render
liverender          = ''		# Filename of saved live render
remote_liverender   = ''		# Where to upload the live render
terminal_colormap   = 'gnuplot2'        # The colormap to use for the terminal render
terminal_resolution = 80		# The width of the terminal render

# Simulation options
kick_algorithms = {
    'dark matter particles': 'PM',	# The algorithm which should be used to kick each species
                   }
use_Ewald = True			# Turn Ewald corrections on or off
fftw_rigor = 'measure'			# Rigor level when acquiring FFTW wisdom

# Debugging options
debug = True                            # Enable debugging messages
enable_Ewald = True                     # Enable Ewald corrections
enable_gravity = True                   # Enable gravity generally
enable_Hubble = 1


