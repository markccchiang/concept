#!/usr/bin/env bash

# This file is part of COùòïCEPT, the cosmological ùòï-body code in Python.
# Copyright ¬© 2015-2017 Jeppe Mosgaard Dakin.
#
# COùòïCEPT is free software: You can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# COùòïCEPT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with COùòïCEPT. If not, see http://www.gnu.org/licenses/
#me $
# The auther of COùòïCEPT can be contacted at dakin(at)phys.au.dk
# The latest version of COùòïCEPT is available at
# https://github.com/jmd-dk/concept/



# This utility prints out information about snapshots.
# More specifically, it prints the meta data contained in the snapshot
# (everything except the actual component data).
# You can run this file directly as
# utilities/info paths [--generate-params [paramsdir]]
# or invoke it via the concept script as
# ./concept --util info paths [--generate-params [paramsdir]]
# In both cases, paths are paths to snapshot files
# or directories containing snapshot files.
# When the --generate-params flag is set, only the global
# parameters which goes into a parameter file will be printed,
# and in a format understandable by COùòïCEPT.



# Absolute paths to this file and its directory
this_file="$(readlink -f "${BASH_SOURCE[0]}")"
this_dir="$(dirname "${this_file}")"

# Source the concept script
source "${this_dir}/../concept"

# Set up error trapping
ctrl_c()
{
    trap : 0
    exit 2
}
abort()
{
    colorprint "An error occurred while using the \"$(basename "${this_file}")\" utility!" "red"
    exit 1
}
if [ "${called_from_concept}" == "True" ]; then
    trap 'ctrl_c' SIGINT
    trap 'abort' EXIT
    set -e
fi

# Use Python's argparse module to handle command-line arguments
args=$("${python}" -B -c "
import argparse, sys
# Setup command-line arguments
parser = argparse.ArgumentParser(prog='$(basename "${this_file}")',
                                 description='Run the COùòïCEPT $(basename "${this_file}") utility')
parser.add_argument('paths',
                    nargs='+',
                    help='paths to snapshots or directories of snapshots',
                    )
parser.add_argument('-g', '--generate-params',
                    nargs='?',
                    help=('generate parameter file(s) from snapshot(s). Where to save '
                          'the parameter file(s) can be specified as the second argument'),
                    const='${params_dir}',
                    default=False,
                    )
# Enables Python to write directly to screen (stderr)
# in case of help request.
stdout_copy = sys.stdout
sys.stdout = sys.stderr
# Now do the actual argument parsing,
# including writing out the help message.
if '${called_from_concept}' == 'True':
    # Called from concept - Throw exception on illegal args
    args = parser.parse_args()
else:
    # Called directly - Allow what appears to be illegal args
    # (these might be known to the concept script).
    args, unknown_args = parser.parse_known_args()
# If the parsed paths argument is a string representation of a Python list,
# use this list as the list of paths directly.
if args.paths[0][0] == '[' and args.paths[0][-1] == ']':
    args.paths = eval(args.paths[0])
# Reset stdout
sys.stdout = stdout_copy
# Print out the arguments.
# These will be captured in the Bash 'args' variable.
print('argparse_finished=yes')
print('paths=({})'.format(' '.join(['\"{}\"'.format(path) for path in args.paths])))
print('generate_params={}'.format(args.generate_params))
" "$@" || :)
# Evaluate the handled arguments into this scope
eval "${args}"
# Exit if argparse exited without finishing
if [ "${argparse_finished}" != "yes" ]; then
    trap : 0
    exit 0
fi

# If not called indirectly through the concept script,
# call the concept script now.
if [ "${called_from_concept}" != "True" ]; then
    "${concept}" --util "${this_file}" "$@"
    trap : 0
    exit 0
fi

# If no parameterfile is supplied,
# use the one that goes along with this utility.
if [ "${params}" == "None" ]; then
    params="${this_file}.params"
fi

# Convert to absolute paths
for i in ${!paths[@]}; do
    paths[${i}]="$(absolute_path "${paths[${i}]}" "${workdir}")"
done

# If supplied, convert parameter directory to absolute path
# and put it in quotes. 
if [ "${generate_params}" != "False" ]; then
    generate_params="\'$(absolute_path "${generate_params}" "${workdir}")\'"
fi

# Make temporary parameter file with every information needed
mkdir -p "${this_dir}/params"
params_filename="${this_dir}/params/$(basename "${this_file}").params"
printf "
# The special_params dict, specifying details of the utility run
special_params = {
    'special': '$(basename "${this_file}")',
    'generate params': ${generate_params},
    'paths'          : $(bash_array2python_list paths[@]),
                  }
# Parameter values which should always be used when running this utility
...
# Set the path to the parameter file to be the path to the actual
# parameter file specified by the user, not this autogenerated
# parameter file.
params_path_ori = paths['params']
paths['params'] = '${params}'
###################
# User parameters #
###################
$(cat "${params}")
##########################
# End of user parameters #
##########################
# Reinsert original path to the parameter file
paths['params'] = params_path_ori
" > "${params_filename}"



# Run COùòïCEPT to printout the snapshot information.
# Always run locally using 1 process.
"${concept}" -m "${main}"                  \
             -n 1                          \
             -p "${params_filename}"       \
             --local                       \
             ${pure_python_flag}

# Cleanup
rm -f "${params_filename}"

# Exit gracefully
colorprint "$(basename "${this_file}") utility ran successfully" "green"
trap : 0

