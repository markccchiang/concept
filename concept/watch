#!/bin/bash

# The code directory
this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Get the jobid
if [ "$#" -lt 1 ]; then
    # Find the current (latest) jobid
    jobid=$(mj | grep ".in1" | awk '{print $1}')
    Njobs=$(echo "${jobid}" | wc -w)
    if [ "${Njobs}" == 0 ]; then
        echo "You currently have nu jobs submitted"
        exit 0
    fi
    if [ "${Njobs}" -gt 1 ]; then
        echo "You currently have ${Njobs} jobs submitted. The latest will be watched"
        jobid=$(echo "${jobid}" | awk '{print $NF}')
    fi
else
    # The jobid was supplied as an argument
    jobid="$1"
fi
jobid="${jobid%.in1}"

# Function for continuously print out the tail of logs/remote_jobid
function read_tail {
    echo "Job ${jobid} is running..."
    echo
    sleep 10
    # Wait for logs/remote_jobid to be created
    while :; do
        if [ -f "${this_dir}/logs/remote_${jobid}" ]; then
            break
        fi
        sleep 300
    done
    # Continuously print out the tail of subdir/log/jobid.output
    tail -n 1000 -f "${this_dir}/logs/remote_${jobid}" &
    # Trap possible future Ctrl-C and make it kill above tail command before exiting this script
    tail_pid=$!
    trap 'kill -9 $tail_pid; echo ; exit 130; echo ' SIGINT
    # Continue script until jobid is not listed as one of my jobs
    while :; do
        if [[ -z $(mj | grep "${jobid}") ]]; then
            sleep 10
            # Kill above tail command silently
            exec 3>&2; exec 2> /dev/null; kill ${tail_pid} >/dev/null 2>&1; sleep 1; exec 2>&3; exec 3>&-
            break
        fi
        sleep 300
    done
}

# Wait for execution of job, then call read_tail
if [[ -z $(je | grep "${jobid}") ]]; then
    # Job not running
    if [[ -z $(js | grep "${jobid}") ]]; then
        # Job not in progress
        echo "Job ${jobid} has ended"
    else
        # Job is in queue
        echo "Job ${jobid} is queued..."
        sleep 10
        while :; do
            if [[ -n $(je | grep "${jobid}") ]]; then
                break
            fi
            sleep 300
        done
        # Job running
        read_tail
    fi
else
    # Job running
    read_tail
fi

