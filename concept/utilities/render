#!/usr/bin/env bash

# This file is part of COùòïCEPT, the cosmological ùòï-body code in Python.
# Copyright ¬© 2015 Jeppe Mosgaard Dakin.
#
# COùòïCEPT is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# COùòïCEPT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with COùòïCEPT. If not, see http://www.gnu.org/licenses/
#
# The auther of COùòïCEPT can be contacted at
# jeppe.mosgaard.dakin(at)post.au.dk
# The latest version of COùòïCEPT is available at
# https://github.com/jmd-dk/concept/



# This utility can produce renders of snapshots.
# Run it by invoking the concept script with the
# --u render path
# option, where path is the path to snapshot file
# or a directory containing snapshots.

# Absolute paths to this file and its directory
this_file="$(readlink -f "${BASH_SOURCE[0]}")"
this_dir="$(dirname "${this_file}")"

# Set up error trapping
ctrl_c()
{
    trap : 0
    exit 2
}
abort()
{
    colorprint "An error occurred while using the \"$(basename ${this_file})\" utility!" "red"
    exit 1
}
trap 'ctrl_c' SIGINT
trap 'abort' EXIT
set -e

# Source the concept script
source "${this_dir}/../concept"

# This script should always be called indirectly using the concept script
if [ "${called_from_concept}" != "True" ]; then
    colorprint "Error: The $(basename ${this_file}) utility must be called via the concept script, as" "red"
    colorprint "./concept -u $(basename ${this_file}) path" "red"
    exit 1
fi

# If no parameterfile is supplied, use the one that goes along with this utility
if [ "${params}" == "None" ]; then
    params="${this_file}.params"
fi

# Check for required positional arguments
if [ "$#" -lt 1 ] || [ -z "$1" ]; then
    colorprint "Error: The $(basename ${this_file}) utility is missing a required argument: path" "red"
    exit 1
fi
path="$1"
if [ "$#" -gt 1 ]; then
    badvars=""
    for badvar in ${@:2}; do
        if [ -n "${badvar}" ]; then
            badvars="${badvars}, \"${badvar}\""
        fi
    done
    badvars="${badvars:2}"
    colorprint "Warning: The following arguments will be ignored by the $(basename ${this_file}) utility:" "red"
    colorprint "${badvars}" "red"
fi

# Convert to absolute path
path="$(absolute ${path})"

# Does the path exist?
if [ ! -f "${path}" ] && [ ! -d "${path}" ]; then
    colorprint "Error: The path \"${path}\" does not exist!" "red"
    exit 1
fi

# Get information about all snapshots in the path
info="$("${concept}" --util snapshot_info "${path}")"
snapshot_filenames="$(echo "${info}" | grep Information | awk '{print $3}')"
boxsizes="$(          echo "${info}" | grep boxsize     | awk '{print $2}')"

# Print out which snapshots will be used
echo "Powerspectra will be produced of the following snapshots:"
echo "${snapshot_filenames}"

# For each snapshot, run the COùòïCEPT code to create the render
i=0
for snapshot_filename in ${snapshot_filenames}; do
    # Remove quotes (and escape sequence!) from snapshot filename
    snapshot_filename="$(${python} -B -c "import re; print(re.search('\"(.*?)\"', '${snapshot_filename}').group(1))")"
    # Get the i'th boxsize
    ((i += 1))
    boxsize=$(echo ${boxsizes} | awk "{print \$${i}}")
    # Make temporary parameter file with every information needed
    printf "boxsize = ${boxsize}
special_params = {
    'special':           'render',
    'snapshot_filename': '${snapshot_filename}',
                  }
$(cat "${params}")
" > "${this_file}.params.full"
    # Run COùòïCEPT to produce the render
    "${concept}" -m "${main}" -n ${nprocs} -p "${this_file}.params.full" -q "${queue}" -w "${walltime}" ${local_flag} ${pure_python_flag}
done

# Cleanup
rm "${this_file}.params.full"

# Exit gracefully
colorprint "$(basename ${this_file}) utility ran successfully" "green"
trap : 0

