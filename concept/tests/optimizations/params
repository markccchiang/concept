# This file is part of CO𝘕CEPT, the cosmological 𝘕-body code in Python.
# Copyright © 2015–2018 Jeppe Mosgaard Dakin.
#
# CO𝘕CEPT is free software: You can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# CO𝘕CEPT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with CO𝘕CEPT. If not, see http://www.gnu.org/licenses/
#
# The author of CO𝘕CEPT can be contacted at dakin(at)phys.au.dk
# The latest version of CO𝘕CEPT is available at
# https://github.com/jmd-dk/concept/



# Directory of this parameter file (non-parameter variable)
_this_dir = os.path.dirname(paths['params'])

# Input/output
_size = 16
initial_conditions = [
    {'name'   : 'matter component',
     'species': 'matter particles',
     'N'      : _size**3,
     },
    {'name'           : 'neutrino component',
     'species'        : 'neutrino fluid',
     'gridsize'       : _size,
     'boltzmann_order': 2,
     },
]
output_dirs  = {
    'powerspec': _this_dir + '/output',
    'render2D': ...,
}
output_bases = {
    'powerspec': 'powerspec',
    'render2D': 'render2D',
}
output_times = {
    'powerspec': 0.1,
    'render2D': ...,
}
powerspec_select = {
    'all': {'data': True, 'plot': False},
    'all combinations': ...,
}
render2D_select = {
    'all': False,
    ('matter component', 'neutrino component'): {'data': True, 'image': False},
}

# Numerical parameters
boxsize = 5000*Mpc
φ_gridsize = _size

# Cosmology
Ωcdm    = 0.25 - Ων
Ωb      = 0.05
a_begin = 0.02
class_params = {
    'N_ncdm': 1,
    'm_ncdm': 1,
}

# Physics
select_forces            = {'all': {'gravity': 'pm'}}
select_eos_w             = {'neutrino fluid': 'class'}
select_boltzmann_closure = {'neutrino fluid': 'class'}
select_approximations    = {'neutrino fluid': {'P = wρ': False}}

# Simulation options
fluid_scheme_select = {'neutrino fluid': 'Kurganov-Tadmor'}
fluid_options = {
    'Kurganov-Tadmor': {
        'Runge-Kutta order'  : {'neutrino fluid': 2},
        'flux_limiter_select': {'neutrino fluid': 'minmod'},
    },
}
class_reuse = False
