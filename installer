#!/bin/bash

# Run this script to download and install the CONCEPT code by Jeppe Dakin
# with all dependencies. If run without an argument, it will prompt for
# an installation directory. This can also be passed as an argument.
# You can also download and run this script via the following command:
# bash <(wget -O- --no-ch tiny.cc/nbody)
# The above uses a URL shortener. If it does not work, use the full URL:
# https://raw.githubusercontent.com/jmd-dk/concept/master/installer

# A small pause is needed when executing as the result of wget,
# if installation directory is not supplied as an argument.
sleep 1

# Set up error trapping
ctrl_c()
{
    current_step="aborting"
    sleep 0.5
    kill -- -$$
    exit 2
}
abort()
{
    kill -- -$$
    exit 1
}
trap 'ctrl_c' SIGINT
trap 'abort' EXIT
set -e

# The current status
status="initialization"
status_prefix="__new_status__="
status_prefix_length=${#status_prefix}
status_disable="disable"
status_enable="enable"
status_on="on"
status_off="off"
status_visible="${status_on}"

# ANSI/VT100 escape sequences
esc="\033"
# Text formatting
esc_bold="${esc}[1m"
esc_italic="${esc}[3m"
esc_reverted="${esc}[7m"
esc_normal="${esc}[0m"
# Text colors
esc_red="${esc}[91m"
esc_green="${esc}[92m"
esc_yellow="${esc}[93m"
# Cursor movement
esc_up="${esc}[1A"
esc_erase="${esc}[K"
# Functions for pretty printing text
heading()
{
    printf "\n${esc_bold}${esc_yellow}${1}${esc_normal}\n"
}
error()
{
    printf "\n${esc_bold}${esc_red}An error occurred during ${current_step}!${esc_normal}""\n" >&2
}

# Welcome message
printf "${esc_bold}${esc_yellow}This is the installation script to CO${esc_italic}N${esc_normal}${esc_bold}${esc_yellow}CEPT,${esc_normal}
${esc_bold}${esc_yellow}the cosmological ${esc_italic}N${esc_normal}${esc_bold}${esc_yellow}-body code by Jeppe Dakin${esc_normal}\n\n"

# Check whether system dependencies are installed and located on PATH
current_step="checking for preinstalled system dependencies"
# Function for testing whether system dependencies are installed and located on PATH
check_dependency()
{
    # Arguments: name, command, Debian package
    path=$(which "${2}" || echo)
    if [ -z "${path}" ]; then
        echo "Error: Could not find '${1}'."
        not_in_repo=$(apt-cache show "${3}" &> /dev/null; echo $?)
        if [ ${not_in_repo} == 0 ]; then
            echo "You can install it by typing:"
            echo "sudo apt-get -y install ${3}"
            while true; do
                read -p "Run above command now? [Y/n] " yn
                case $yn in
                    [Yy]* ) sudo apt-get -y install ${3}; printf "${1} successfully installed\n\n"; return;;
                    [Nn]* ) exit 1;;
                    "" ) sudo apt-get -y install ${3}; printf "${1} successfully installed\n\n"; return;;
                    * ) exit 1;;
                esac
            done
        fi
        exit 1
    fi
}
check_dependency "awk" "awk" "gawk"
check_dependency "g++" "g++" "g++"
check_dependency "gcc" "gcc" "gcc"
check_dependency "gfortran" "gfortran" "gfortran"
check_dependency "freetype" "freetype-config" "libfreetype6-dev"
check_dependency "make" "make" "build-essential"
check_dependency "sed" "sed" "sed"
check_dependency "tar" "tar" "tar"
check_dependency "wget" "wget" "wget"

# Creating top level directory
current_step="setup of top level directory"
if [ -z "${1}" ]; then
    read -p "Where should the code be installed?$(echo $'\n> ')" -e top_dir
else 
    top_dir="${1}"
fi
top_dir="${top_dir//[ ]/\\ }"        # Places backslashes before spaces. These are needed when expanding tilde, but they will not persist!
eval top_dir="${top_dir}"            # Expand tilde
top_dir=$(readlink -f "${top_dir}")  # Convert to absolute path
echo "The code will be installed in ${top_dir}"
mkdir -p "${top_dir}"
cd "${top_dir}"

# Specification of paths
concept_dir="${top_dir}/concept"
python_dir="${top_dir}/python"
fftw_dir="${top_dir}/fftw"
gadget_dir="${top_dir}/gadget"
fftw_for_gadget_dir="${gadget_dir}/fftw"
gsl_dir="${top_dir}/gsl"
hdf5_dir="${top_dir}/hdf5"
mpi_dir="${top_dir}/mpich"
log="${top_dir}/install_log"
dotpaths="${top_dir}/.paths"



###########################
# Beginning of subprocess #
###########################
(
# Set up error trapping
ctrl_c_subprocess()
{
    trap : 0
    ctrl_c
    exit 0
}
abort_subprocess()
{
    trap : 0
    if [ "${current_step}" != "aborting" ]; then
        error
    fi
    abort
    exit 0
}
trap 'ctrl_c_subprocess' SIGINT
trap 'abort_subprocess' EXIT
set -e

# Functions for controlling the current status
set_status()
{
    status="${1}"
    echo "${status_prefix}${status}"
}
disable_status()
{
    echo "${status_prefix}${status_disable}"
}
enable_status()
{
    echo "${status_prefix}${status_enable}"
}



#################################################################
# URL's to the latest stable versions of the different software #
#################################################################
current_step="search for latest versions of dependencies"
set_status "Searching for latest versions of dependencies"
# Function for checking that a given url actually exists
validate_url()
{
    text=$(wget -S --spider "${1}" 2>&1)
    text_http=$(echo "${text}" | grep "HTTP/1.1 200 OK")
    text_ftp=$(echo "${text}" | grep "Can't check for file existence")
    if [ -n "${text_http}" ] || ([[ "${1}" == "ftp://"* ]] && [ -z "${text_ftp}" ]); then
        echo 1
    else
        echo 0
    fi
}

# OpenSSL needed by pip (version 1.0.2d is known to work)
openssl_version=$(wget -q -O- --no-check-certificate "https://www.openssl.org/source/" | grep -o -P "(?<=openssl-).*(?=LATEST)" || echo)
openssl_version="$(sed 's/.tar.gz.*//' <<< "${openssl_version}")"
if [ -z "${openssl_version}" ]; then
    echo "Error: Could not identify the version number of the latest OpenSSL!"
    exit 1
fi
openssl_url="ftp://ftp.openssl.org/source/openssl-${openssl_version}.tar.gz"
if [ $(validate_url "${openssl_url}") -eq 0 ]; then
    echo "Error: The OpenSSL link is broken!"
    exit 1
fi
# Python (version 3.4 is known to work). Note that 'python_version' will be overwritten later!
python_version=$(wget -q -O- --no-check-certificate "https://www.python.org/downloads/" | grep -o -P "(?<=Python-).*(?=.tar.xz)" | head -1  || echo)
if [ -z "${python_version}" ]; then
    echo "Error: Could not identify the version number of the latest Python!"
    exit 1
fi
python_url="https://www.python.org/ftp/python/${python_version}/Python-${python_version}.tar.xz"
if [ $(validate_url "${python_url}") -eq 0 ]; then
    echo "Error: The Python link is broken!"
    exit 1
fi
# GSL (1.16 is known to work)
gsl_version=$(wget -q -O- --no-check-certificate "http://mirrors.dotsrc.org/gnu/gsl/" | grep -o -P "(?<=gsl-[0-9]).*(?=.tar.gz)" || echo)
gsl_version="${gsl_version##*gsl-}"
if [ -z "${gsl_version}" ]; then
    echo "Could not identify the version number of the latest GSL."
    gsl_version="..."
fi
gsl_url="http://mirrors.dotsrc.org/gnu/gsl/gsl-latest.tar.gz"
if [ $(validate_url "${gsl_url}") -eq 0 ]; then
    echo "Error: The GSL link is broken!"
    exit 1
fi
# Cython_GSL (0.2.1 is known to work)
cython_gsl_version=$(wget -q -O- --no-check-certificate "https://raw.githubusercontent.com/twiecki/CythonGSL/master/README.rst" | grep ":Version:" | awk '{print $NF}' || echo)
if [ -z "${cython_gsl_version}" ]; then
    echo "Could not identify the version number of the latest Cython_GSL."
    cython_gsl_version="..."
fi
cython_gsl_url="https://github.com/twiecki/CythonGSL/archive/master.tar.gz"
if [ $(validate_url "${cython_gsl_url}") -eq 0 ]; then
    echo "Error: The Cython_GSL link is broken!"
    exit 1
fi
# MPICH (3.1.4 is known to work)
mpich_version=$(wget -q -O- --no-check-certificate "http://www.mpich.org/downloads" | grep -m 1 -o -P "(?<=mpich-).*(?=stable)" | awk '{print $1}' || echo "")
if [ -z "${mpich_version}" ]; then
    echo "Could not identify the version number of the latest MPICH."
    mpich_version="..."
fi
mpich_url="http://www.mpich.org/static/downloads/${mpich_version}/mpich-${mpich_version}.tar.gz"
if [ $(validate_url "${mpich_url}") -eq 0 ]; then
    echo "Error: The MPICH link is broken!"
    exit 1
fi
# MPI4Py (1.3.1 is known to work)
mpi4py_version=$(wget -q -O- --no-check-certificate "https://bitbucket.org/mpi4py/mpi4py/downloads/" | grep -m 1 -o -P "(?<=mpi4py/get/).*(?=.tar.gz)" || echo)
if [ -z "${mpi4py_version}" ]; then
    echo "Could not identify the version number of the latest MPI4Py."
    mpi4py_version="..."
fi
mpi4py_url="https://bitbucket.org/mpi4py/mpi4py/get/${mpi4py_version}.tar.gz"
if [ $(validate_url "${mpi4py_url}") -eq 0 ]; then
    echo "Error: The MPI4Py link is broken!"
    exit 1
fi
# HDF5 (1.8.14 is known to work)
hdf5_version=$(wget -q -O- --no-check-certificate "ftp://ftp.hdfgroup.org/HDF5/current/src/" | grep -m 1 -o -P "(?<=hdf5-).*(?=.tar.bz2\")" || echo "")
if [ -z "${hdf5_version}" ]; then
    echo "Could not identify the version number of the latest HDF5."
    hdf5_version="..."
fi
hdf5_url="ftp://ftp.hdfgroup.org/HDF5/current/src/hdf5-${hdf5_version}.tar.bz2"
if [ $(validate_url "${hdf5_url}") -eq 0 ]; then
    echo "Error: The HDF5 link is broken!"
    exit 1
fi
# H5Py (2.4.0 is known to work)
h5py_version=$(wget -q -O- --no-check-certificate "https://pypi.python.org/pypi/h5py/#downloads" | grep -m 1 -o -P "(?<=h5py/).*(?=\"\>h5py)" || echo)
if [ -z "${h5py_version}" ]; then
    echo "Could not identify the version number of the latest H5Py."
    h5py_version="..."
fi
h5py_url="https://pypi.python.org/packages/source/h/h5py/h5py-${h5py_version}.tar.gz"
if [ $(validate_url "${h5py_url}") -eq 0 ]; then
    echo "Error: The H5Py link is broken!"
    exit 1
fi
# FFTW (3.3.4 is known to work)
fftw_version=$(wget -q -O- --no-check-certificate "http://www.fftw.org/download.html" | grep -m 1 -o -P "(?<=fftw-).*(?=.tar.gz\")" || echo)
if [ -z "${fftw_version}" ]; then
    echo "Could not identify the version number of the latest FFTW."
    fftw_version="..."
fi
fftw_url="http://www.fftw.org/fftw-${fftw_version}.tar.gz"
if [ $(validate_url "${fftw_url}") -eq 0 ]; then
    echo "Error: The FFTW link is broken!"
    exit 1
fi
# CONCEPT
concept_version="..."
concept_url="https://github.com/jmd-dk/concept/archive/master.tar.gz"
if [ $(validate_url "${concept_url}") -eq 0 ]; then
    printf "Error: The CO${esc_italic}N${esc_normal}CEPT link is broken!""\n"
    exit 1
fi
# FFTW 2.1.5 for Gadget
fftw_for_gadget_version="2.1.5"
fftw_for_gadget_url="http://www.fftw.org/fftw-${fftw_for_gadget_version}.tar.gz"
if [ $(validate_url "${fftw_for_gadget_url}") -eq 0 ]; then
    echo "Error: The FFTW for GADGET link is broken!"
    exit 1
fi
# Gadget2
gadget_version="2.0.7"
gadget_url="http://www.mpa-garching.mpg.de/gadget/gadget-${gadget_version}.tar.gz"
if [ $(validate_url "${gadget_url}") -eq 0 ]; then
    echo "Error: The GADGET link is broken!"
    exit 1
fi

# Write out installation overview
disable_status
printf "\n${esc_bold}${esc_yellow}Installation overview${esc_normal}\n"
printf "The following software will be installed\n"
printf "Name:{}Version:{}Installation path
CONCEPT{}${concept_version}{}${concept_dir}
Python{}${python_version}{}${python_dir}
FFTW{}${fftw_version}{}${fftw_dir}
FFTW{}${fftw_for_gadget_version}{}${fftw_for_gadget_dir}
GADGET{}${gadget_version}{}${gadget_dir}
GSL{}${gsl_version}{}${gsl_dir}
HDF5{}${hdf5_version}{}${hdf5_dir}
MPICH{}${mpich_version}{}${mpi_dir}\n" | column -t -s {}
sleep 5
enable_status



############################################
# Installing Python and packages from PyPI #
############################################
# OpenSSL needed by pip. This will be installed in the Python directory
current_step="installation of OpenSSL"
heading "Installing OpenSSL"
set_status "Installing OpenSSL"
mkdir "${python_dir}"
mkdir tmp
cd tmp
disable_status
wget -c -O openssl.tar.gz --no-check-certificate "${openssl_url}"
enable_status
tar xfz openssl.tar.gz
cd openssl*
./config shared --prefix="${python_dir}" --openssldir="${python_dir}/openssl"
make
make install
cd "${top_dir}"
rm -rf tmp

# Python itself
current_step="installation of Python"
heading "Installing Python"
set_status "Installing Python"
mkdir tmp
cd tmp
disable_status
wget -c -O python.tar.xz --no-check-certificate "${python_url}"
enable_status
tar -xJf python.tar.xz
cd Python*
export LDFLAGS="-L${python_dir}/lib -Wl,-rpath ${python_dir}/lib"
export LD_LIBRARY_PATH="${python_dir}/lib"
export CPPFLAGS="-I${python_dir}/include -I${python_dir}/include/openssl"
./configure --enable-shared --prefix="${python_dir}" --with-ensurepip=install
make
make install
cp LICENSE README "${python_dir}/"
cd "${top_dir}"
rm -rf tmp
# Overwrite the 'python_version' variable with the major.minor version and create a python variable, storing the path to the newly installed Python interpreter
python_version=$("${python_dir}/bin/python3" -c "from sys import version_info as v; print(str(v.major) + '.' + str(v.minor))")
python="${python_dir}/bin/python${python_version}"
# Update Python packages preinstalled with Python itself
current_step="update of Python"
disable_status
"${python}" -m pip install --no-cache-dir --upgrade pip
"${python}" -m pip install --no-cache-dir yolk3k
"${python}" -m pip install --no-cache-dir -U $("${python}" -m yolk -U | awk '{print $1}' | uniq)
enable_status

# Versions of Python dependencies from PyPI
current_step="owerview of Python packages"
cython_version=$("${python}" -m yolk -V cython | head -n 1 | awk '{print $NF}')
matplotlib_version=$("${python}" -m yolk -V matplotlib | head -n 1 | awk '{print $NF}')
numpy_version=$("${python}" -m yolk -V numpy | head -n 1 | awk '{print $NF}')
pexpect_version=$("${python}" -m yolk -V pexpect | head -n 1 | awk '{print $NF}')
pillow_version=$("${python}" -m yolk -V pillow | head -n 1 | awk '{print $NF}')

# Print out Python package installation overview
disable_status
printf "\n${esc_bold}${esc_yellow}Python packages overview${esc_normal}\n"
printf "The following Python packages will be installed\n"
printf "Name:{}Version:{}Installation path
Cython{}${cython_version}{}${python_dir}/lib/python${python_version}/site-packages/Cython
Cython_GSL{}${cython_gsl_version}{}${python_dir}/lib/python${python_version}/site-packages/Cython_GSL
H5Py{}${h5py_version}{}${python_dir}/lib/python${python_version}/site-packages/h5py
Matplotlib{}${matplotlib_version}{}${python_dir}/lib/python${python_version}/site-packages/matplotlib
MPI4Py{}${mpi4py_version}{}${python_dir}/lib/python${python_version}/site-packages/mpi4py
NumPy{}${numpy_version}{}${python_dir}/lib/python${python_version}/site-packages/numpy
Pexpect{}${pexpect_version}{}${python_dir}/lib/python${python_version}/site-packages/pexpect
Pillow{}${pillow_version}{}${python_dir}/lib/python${python_version}/site-packages/PIL\n" | column -t -s {}
sleep 5
enable_status

# Install Python packages from PyPI
# Cython
current_step="installing Cython"
heading "Installing Cython"
set_status "Installing Cython"
"${python}" -m pip install -v -v -v --no-cache-dir cython
# NumPy
current_step="installing NumPy"
heading "Installing NumPy"
set_status "Installing Numpy"
"${python}" -m pip install -v -v -v --no-cache-dir numpy
# Pillow
current_step="installing Pillow"
heading "Installing Pillow"
set_status "Installing Pillow"
"${python}" -m pip install -v -v -v --no-cache-dir pillow
# Matplotlib
current_step="installing Matplotlib"
heading "Installing Matplotlib"
set_status "Installing Matplotlib"
"${python}" -m pip install -v -v -v --no-cache-dir matplotlib
# Pexpect
current_step="installing Pexpect"
heading "Installing Pexpect"
set_status "Installing Pexpect"
"${python}" -m pip install -v -v -v --no-cache-dir pexpect
# Update Python packages
current_step="updating Python packages"
disable_status
"${python}" -m pip install --no-cache-dir -U $("${python}" -m yolk -U | awk '{print $1}' | sort -u)
enable_status



################################################################
# Installing CONCEPT dependencies and download the code itself #
################################################################
# GSL
current_step="installation of GSL"
heading "Installing GSL"
set_status "Installing GSL"
mkdir "${gsl_dir}"
mkdir tmp
cd tmp
disable_status
wget -c -O gsl.tar.gz --no-check-certificate "${gsl_url}"
enable_status
tar xfz gsl.tar.gz
cd gsl*
./configure --prefix="${gsl_dir}"
make
make install
cp COPYING README "${gsl_dir}"
cd "${top_dir}"
rm -rf tmp

# The Cython_GSL Python package
current_step="installation of Cython_GSL"
heading "Installing Cython_GSL"
set_status "Installing Cython_GSL"
disable_status
wget -c -O CythonGSL.tar.gz --no-check-certificate "${cython_gsl_url}"
enable_status
tar xfz CythonGSL.tar.gz
cd CythonGSL*
export LD_LIBRARY_PATH="${gsl_dir}/lib:$LD_LIBRARY_PATH"
"${python}" setup.py build
"${python}" setup.py install
cd "${top_dir}"
rm -rf CythonGSL*

# MPICH
current_step="installation of MPICH"
heading "Installing MPICH"
set_status "Installing MPICH"
mkdir "${mpi_dir}"
mkdir tmp
cd tmp
disable_status
wget -c -O mpich.tar.gz --no-check-certificate "${mpich_url}"
enable_status
tar xfz mpich.tar.gz
cd mpich*
./configure --enable-shared --disable-fortran --prefix="${mpi_dir}"
make
make install
cp COPYRIGHT "${mpi_dir}"
cd "${top_dir}"
rm -rf tmp

# The MPI4Py Python package
current_step="installation of MPI4Py"
heading "Installing MPI4Py"
set_status "Installing MPI4Py"
disable_status
wget -c -O mpi4py.tar.gz --no-check-certificate "${mpi4py_url}"
enable_status
tar xfz mpi4py.tar.gz
cd mpi4py*
export MPI_DIR="${mpi_dir}"
export PATH="${mpi_dir}/bin":"${PATH}"
export LD_LIBRARY_PATH="${mpi_dir}/lib":"${LD_LIBRARY_PATH}"
export DYLD_LIBRARY_PATH="${mpi_dir}/lib":"${DYLD_LIBRARY_PATH}"
"${python}" setup.py install
cd "${top_dir}"
rm -rf mpi4py*

# HDF5
current_step="installation of HDF5"
heading "Installing HDF5"
set_status "Installing HDF5"
mkdir tmp
cd tmp
disable_status
wget -c -O hdf5.tar.bz2 --no-check-certificate "${hdf5_url}"
enable_status
tar xjf hdf5.tar.bz2
cd hdf5*
CC="${mpi_dir}/bin/mpicc" ./configure --enable-shared --enable-parallel --prefix="${hdf5_dir}"
make
make install
cp COPYING README.txt "${hdf5_dir}"
cd "${top_dir}"
rm -rf tmp

# The H5Py Python package
current_step="installation of H5Py"
heading "Installing H5Py"
set_status "Installing H5Py"
disable_status
wget -c -O h5py.tar.gz --no-check-certificate "${h5py_url}"
enable_status
tar xfz h5py.tar.gz
cd h5py*
export CC="${mpi_dir}/bin/mpicc"
"${python}" setup.py configure --mpi --hdf5="${hdf5_dir}"
"${python}" setup.py build
"${python}" setup.py install
cd "${top_dir}"
rm -rf h5py*

# FFTW
current_step="installation of FFTW"
heading "Installing FFTW"
set_status "Installing FFTW"
mkdir tmp
cd tmp
disable_status
wget -c -O fftw.tar.gz "${fftw_url}"
enable_status
tar xfz fftw.tar.gz
cd fftw*
# Double-precision
CC="${mpi_dir}/bin/mpicc" MPICC="${mpi_dir}/bin/mpicc" CFLAGS="-O3 -fPIC" CPPFLAGS="-I/${mpi_dir}/include" LDFLAGS="-L${mpi_dir}/lib" MPILIBS=-lmpi ./configure --enable-shared --enable-mpi --enable-openmp --enable-threads --prefix="${fftw_dir}"
make
make install
# Single-precision goes here ..........................
cp COPYING README "${fftw_dir}"
cd "${top_dir}"
rm -rf tmp

# The CONCEPT code
current_step="installation of CO\e[3mN\e[0m\e[1m\e[91mCEPT"
printf "\n${esc_bold}${esc_yellow}Installing CO${esc_italic}N${esc_normal}${esc_bold}${esc_yellow}CEPT${esc_normal}\n"
set_status 'Installing CONCEPT'
disable_status
wget -c -O concept.tar.gz --no-check-certificate "${concept_url}"
enable_status
tar xfz concept.tar.gz
rm concept.tar.gz
mv concept-master/* "${top_dir}"  # Note: This leaves the .paths file behind in the concept-master folder
rm -r concept-master
# Create empty logs and output directories
mkdir -p "${concept_dir}/logs"
mkdir -p "${concept_dir}/output"

# Create the .paths file, storing important paths used by the program
current_step="creataion of the .paths file"
heading "Writing paths to .paths"
set_status "Writing paths to .paths"
Gadget2_dir="${gadget_dir}/Gadget2"
tests_dir="${concept_dir}/tests"
cython="${python_dir}/bin/cython"
mpicc="${mpi_dir}/bin/mpicc"
mpiexec="${mpi_dir}/bin/mpiexec"
python_config="${python_dir}/bin/python${python_version}-config"
run="${concept_dir}/run"
echo "# This file contains absolute paths to directories and files used by the
# program. You must manually edit the paths below. All other files rely on
# these paths, as they are not given anywhere else.

###############
# Directories #
###############
# Directory containing the CONCEPT source code
concept_dir='${concept_dir}'
# Directory of FFTW
fftw_dir='${fftw_dir}'
# Directory of FFTW2, used by GADGET
fftw_for_gadget_dir='${fftw_for_gadget_dir}'
# Directory of Gadget2
gadget_dir='${gadget_dir}'
# Directory containing the GADGET2 source code
Gadget2_dir='${Gadget2_dir}'
# Directory of GSL
gsl_dir='${gsl_dir}'
# Directory of HDF5
hdf5_dir='${hdf5_dir}'
# Directory of MPI
mpi_dir='${mpi_dir}'
# Directory of Python
python_dir='${python_dir}'
# Directory containing tests for the CONCEPT code
tests_dir='${tests_dir}'
# Top level directory, containing e.g. README.md
top_dir='${top_dir}'

#########
# Files #
#########
# The Cython executable
cython='${cython}'
# The MPI C compiler
mpicc='${mpicc}'
# The MPI executable
mpiexec='${mpiexec}'
# The Python3 interpreter
python='${python}'
# The Python3 configuration executable
python_config='${python_config}'
# The run script of the CONCEPT code
run='${run}'
" > "${dotpaths}"



######################################################
# Install GADGET2, used for testing the CONCEPT code #
######################################################
# FFTW 2.1.5 (GADGET2 is incompatible with FFTW 3.x)
current_step="installation of FFTW2 used by GADGET"
heading "Installing FFTW2 used by GADGET"
set_status "Installing FFTW2 used by GADGET"
mkdir tmp
cd tmp
disable_status
wget -c -O fftw.tar.gz "${fftw_for_gadget_url}"
enable_status
tar xfz fftw.tar.gz
cd fftw*
# Double-precision
CC="${mpi_dir}/bin/mpicc" MPICC="${mpi_dir}/bin/mpicc" CFLAGS="-O3 -fPIC" CPPFLAGS="-I${mpi_dir}/include" LDFLAGS="-L${mpi_dir}/lib" MPILIBS=-lmpi ./configure --enable-shared --enable-mpi --enable-openmp --enable-threads --enable-type-prefix --prefix="${fftw_for_gadget_dir}"
make
make install
# Single-precision
make clean
CC="${mpi_dir}/bin/mpicc" MPICC="${mpi_dir}/bin/mpicc" CFLAGS="-O3 -fPIC" CPPFLAGS="-I${mpi_dir}/include" LDFLAGS="-L${mpi_dir}/lib" MPILIBS=-lmpi ./configure --enable-shared --enable-mpi --enable-openmp --enable-threads --enable-float --enable-type-prefix --prefix="${fftw_for_gadget_dir}"
make
make install
cp COPYING README "${fftw_for_gadget_dir}"
cd "${top_dir}"
rm -rf tmp

# GADGET2
current_step="installation of GADGET"
heading "Installing GADGET"
set_status "Installing GADGET"
mkdir tmp
cd tmp
disable_status
wget -c -O gadget2.tar.gz "${gadget_url}"
enable_status
tar xfz gadget2.tar.gz
mv Gadget*/* "${gadget_dir}"
cd "${top_dir}"
rm -rf tmp

# Copyright notice
current_step="copyright notice"
printf "\n${esc_bold}${esc_yellow}Copyright notice${esc_normal}
Python, GSL, MPICH, HDF5, FFTW and GADGET (along with its own
version of FFTW) has been installed into seperate folders in ${top_dir}.
Any use of CO\e[3mN\e[0mCEPT must conform to the license terms of the
above software. These can be found in their seperate installation
directories.\n"

# Subprocess complete. Deactivate trap before exiting.
trap : 0
) > "${log}" &
log_pid=$!
#####################
# End of subprocess #
#####################



# Display loop
printf "\n\n"
tail -f "${log}" --pid $log_pid | while read line; do
    if [[ "${line}" == "${status_prefix}"* ]]; then
        status_backup_="${status}"
        status=${line:${status_prefix_length}}
        # Enable/disable status
        if [[ "${status}" == "${status_disable}" ]]; then
            status_visible="${status_off}"
            status_backup="${status_backup_}"
            printf "${esc_up}${esc_erase}"
            printf "${esc_up}"
        elif [[ "${status}" == "${status_enable}" ]]; then
            status_visible="${status_on}"
            status="${status_backup}"
            printf "\n${esc_bold}${esc_reverted}${status}${esc_normal}\n"
        else
            # Normal status update
            if [[ "${status_visible}" == "${status_on}" ]]; then
                printf "${esc_up}${esc_erase}"
                printf "${esc_up}"
                printf "\n${esc_bold}${esc_reverted}${status}${esc_normal}\n"
            fi
        fi
    else
        if [[ "${status_visible}" == "on" ]]; then
            # Line with status enabled
            printf "${esc_up}${esc_erase}"
            printf "${esc_up}"
            echo -e "${line}"
            printf "\n${esc_bold}${esc_reverted}${status}${esc_normal}\n"
        else
            # Line with status disabled
            echo -e "${line}"
        fi
    fi
done
printf "${esc_up}${esc_erase}"
printf "${esc_up}"

# Remove the log file
rm -f "${log}"

# Installation complete. Deactivate trap before exiting.
trap : 0
printf "\n${esc_bold}${esc_green}CO${esc_italic}N${esc_normal}${esc_bold}${esc_green}CEPT successfully installed${esc_normal}\n"

