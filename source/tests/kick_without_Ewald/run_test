#!/bin/bash

# This script performs a drift test of the N-body code by comparison with
# Gadget. ICs are generated, containing 4 particles placed symmetrically
# in the yz-plane so that no net forces exist (due to mirror images). A
# initial velocity in the x-direction is given. The particles will pass
# through the periodic edge of the box during the simulation.

# The name of this test (the directory name)
this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
test_name=$(basename "${this_dir}")

# Set up error trapping
ctrl_c()
{
    trap : 0
    exit 2
}
abort()
{
    printf "\e[1m\e[91mAn error occurred during ${test_name} test!\e[0m\n" >&2
    exit 1
}
trap 'ctrl_c' SIGINT
trap 'abort' EXIT
set -e

# Load paths from the .paths file
curr="${this_dir}"
while [ 1 ]; do
    if [ -f "${curr}/.paths" ]; then
        source "${curr}/.paths"
        break
    fi
    if [ "${curr}" == "/" ]; then
        printf "\e[1m\e[91mCould not find the .paths file!\e[0m\n" >&2
        exit 1
    fi
    curr="`dirname \"${curr}\"`"
done

# Create list of output times, used both by the N-body code and Gadget
"${python}" -c "import numpy as np; np.savetxt('${this_dir}' + '/outputlist', np.linspace(0.03, 0.1, 5))"

# Create the Ewald grid using Cython, if it does not already exist
# (for fast IC generation).
${run} -n 4 -p "${this_dir}/params" --exit

# Generate ICs
${run} -n 1 -p "${this_dir}/params" -m "${this_dir}/generate_IC.py" --pure-python

# Make a local copy of the files in the code directory
edited_source_dir="${this_dir}/source_edited"
mkdir -p "${edited_source_dir}"
find "${Nbody_dir}" -maxdepth 1 -type f -exec cp '{}' "${edited_source_dir}" \;

# Edit the ewald.py file so that the returned Ewald corrections are zero
sed -i "/force\[0\] += x\/r3/c\    force\[0\] = 0" "${edited_source_dir}/ewald.py"
sed -i "/force\[1\] += y\/r3/c\    force\[1\] = 0" "${edited_source_dir}/ewald.py"
sed -i "/force\[2\] += z\/r3/c\    force\[2\] = 0" "${edited_source_dir}/ewald.py"

# Run the N-body code on the generated ICs
"${edited_source_dir}/run" -n 1 -p "${this_dir}/params"

# Create an edited version of params_gadget with correct path information
cp "${this_dir}/params_gadget" "${this_dir}/params_gadget_edited"
sed -i "/^ *InitCondFile / s/ [^# ]/ ${this_dir//\//\\/}\/IC/" "${this_dir}/params_gadget_edited"
sed -i "/^ *OutputDir / s/ [^# ]/ ${this_dir//\//\\/}\/output/" "${this_dir}/params_gadget_edited"
sed -i "/^ *OutputListFilename / s/ [^# ]/ ${this_dir//\//\\/}\/outputlist/" "${this_dir}/params_gadget_edited"

# Create an edited version of Makefile_gadget with correct parth information
# and replace the Makefile in the Gadget2 directory with this edited version.
cp "${this_dir}/Makefile_gadget" "${this_dir}/Makefile_gadget_edited"
sed -i "/^ *CC= / s/ [^# ]/ ${mpicc//\//\\/}/" "${this_dir}/Makefile_gadget_edited"
path="${openmpi_dir}/include"
sed -i "/^ *MPI_INCL= / s/ [^# ]/ \"-I${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\"/" "${this_dir}/Makefile_gadget_edited"
path="${openmpi_dir}/lib"
sed -i "/^ *MPI_LIBS= / s/ [^# ]/ \"-L${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\"/" "${this_dir}/Makefile_gadget_edited"
path="${gsl_dir}/include"
sed -i "/^ *GSL_INCL= / s/ [^# ]/ \"-I${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\"/" "${this_dir}/Makefile_gadget_edited"
path="${gsl_dir}/lib"
sed -i "/^ *GSL_LIBS= / s/ [^# ]/ \"-L${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\"/" "${this_dir}/Makefile_gadget_edited"
path="${fftw_for_gadget_dir}/include"
sed -i "/^ *FFTW_INCL= / s/ [^# ]/ \"-I${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\"/" "${this_dir}/Makefile_gadget_edited"
path="${fftw_for_gadget_dir}/lib"
sed -i "/^ *FFTW_LIBS= / s/ [^# ]/ \"-L${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\"/" "${this_dir}/Makefile_gadget_edited"
cp "${this_dir}/Makefile_gadget_edited" "${Gadget2_dir}/Makefile"

# Build Gadget and run simulation based on the ICs
(cd "${Gadget2_dir}" && make clean && make && "${mpiexec}" -n 1 --prefix "${openmpi_dir}" Gadget2 "${this_dir}/params_gadget_edited")

# Analyze the output snapshots
"${run}" -n 1 -p "${this_dir}/params" -m "${this_dir}/analyze.py" --pure-python 2>/dev/null

# Test run complete. Deactivate trap before exiting.
trap : 0
printf "\e[1m\e[92m${test_name^} test ran successfully\e[0m\n"

