#!/usr/bin/env bash

# This file is part of CONCEPT, the cosmological N-body code in Python.
# Copyright (C) 2015 Jeppe Mosgard Dakin.
#
# CONCEPT is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# CONCEPT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with CONCEPT. If not, see http://www.gnu.org/licenses/
#
# The auther of CONCEPT can be contacted at
# jeppe.mosgaard.dakin(at)post.au.dk
# The latest version of CONCEPT is available at
# https://github.com/jmd-dk/concept/



# This script runs the CONCEPT code.
# Run the script with the -h option to get help

# Absolute paths to this file and its directory
this_file=$(readlink -f "${BASH_SOURCE[0]}")
this_dir="$(dirname "${this_file}")"

# ANSI/VT100 escape sequences
esc="\x1b"
esc_normal="${esc}[0m"
esc_bold="${esc}[1m"
esc_italic="${esc}[3m"
esc_no_italic="${esc}[23m"
esc_red="${esc}[91m"

# Load paths from the .paths file
curr="${this_dir}"
while :; do
    if [ -f "${curr}/.paths" ]; then
        source "${curr}/.paths"
        break
    fi
    if [ "${curr}" == "/" ]; then
        # Print out error message and exit
        printf "${esc_bold}${esc_red}Could not find the .paths file!${esc_normal}\n" >&2
        exit 1
    fi
    curr="$(dirname "${curr}")"
done

# Function for printing colored messages
terminal_CONCEPT="CO${esc_italic}N${esc_no_italic}CEPT"
colorprint()
{
# Arguments: Message, color
${python} -c "import sys
from blessings import Terminal
terminal = Terminal(force_styling=True)
msg='${1}'.replace('CONCEPT', '${terminal_CONCEPT}')
print(terminal.bold_${2}(msg), file=(sys.stderr if '${2}' == 'red' else sys.stdout))"
}

# If this file is being sourced, return now
if [ "${BASH_SOURCE[0]}" != "${0}" ]; then
    return
fi

# Default values of command-line arguments
nprocs=1
params="${this_dir}/params/default"
main="${this_dir}/main.py"
pure_python=0
walltime=72
# List of remote queues and number of CPU per node. The first queue is the default queue 
queues=(q8n q8 q4)
ppns=(8 8 4)
# Should PBS be used to submit remote jobs?
use_PBS=1

# Use Python's argparse module to handle command-line arguments
args=($(${python} -B -c "
import argparse
import sys
from os.path import basename, dirname
# Enables Python to write directly to screen when asked for help
if any(h in sys.argv for h in ['-h', '--he', '--hel', '--help']):
    sys.stdout = sys.stderr
# Set the filename of the script
sys.argv[0] = '${this_file}'
# Setup command-line arguments
parser = argparse.ArgumentParser(description='Run the CONCEPT code.')
parser.add_argument('--local',
                    help='Force the run to be done locally, without submitting it via PBS',
                    default=False,
		    action='store_true',
                    )
parser.add_argument('-m', '--main',
                    help='entry point of the code',
                    default='${main}',
                    )
parser.add_argument('-n', '--nprocs',
                    help='number of processes',
                    type=int,
                    default=${nprocs},
                    )
parser.add_argument('-p', '--params',
                    help='parameterfile to use',
                    default='${params}',
                    )
parser.add_argument('--pure-python',
                    help='run in pure Python mode',
                    default=${pure_python},
                    action='store_true',
                    )
parser.add_argument('-t', '--test',
                    help='run test TEST. TEST can be any subdirectory of the tests directory. Use TEST=all to run all tests',
                    default='none',
                    )
parser.add_argument('-q', '--queue',
                    help='Queue for submission of the remote job. If omitted the script will try to choose the best.',
                    default='none',
                    )
parser.add_argument('-w', '--walltime',
                     help='Set the PBS walltime in whole hours',
                     type=int,
                     default=${walltime},
                     )
args = parser.parse_args()
# Warnings when basic parameters are not supplied
unspecified_nprocs = False
unspecified_params = False
arg = '--nprocs'
if not any(n in sys.argv for n in ['-n'] + [arg[:i] for i in range(4, len(arg) + 1)]):
    unspecified_nprocs = True
arg = '--params'
if not any(p in sys.argv for p in ['-p'] + [arg[:i] for i in range(4, len(arg) + 1)]):
    if basename(dirname(args.main)) == 'tests':
        # Running a test but no parameterfile specified!
        args.params = dirname(args.main) + '/params_' + basename(args.main)
    else:
        unspecified_params = True
# Print out the arguments.
# These will be captured in the bash 'args' variable
print(args.nprocs,
      args.params,
      args.main,
      int(args.pure_python),
      int(unspecified_nprocs),
      int(unspecified_params),
      args.test,
      args.walltime,
      args.queue,
      int(args.local),
      )
" "$@"))
nprocs="${args[0]}"
params="${args[1]}"
main="${args[2]}"
pure_python="${args[3]}"
unspecified_nprocs="${args[4]}"
unspecified_params="${args[5]}"
test="${args[6]}"
walltime="${args[7]}"
queue="${args[8]}"
local="${args[9]}"
if [ "${#args[@]}" -ne 10 ]; then
    exit 1
fi

# Set up error trapping
ctrl_c()
{
    trap : 0
    exit 2
}
abort()
{
    colorprint "An error occurred!" "red"
    exit 1
}
trap 'ctrl_c' SIGINT
trap 'abort' EXIT
set -e

# Convert all supplied paths to absolute paths
absolute()
{
    local path="${1}"
    path="${path//[ ]/\\ }"        # Places backslashes before spaces. These are needed when expanding tilde, but they will not persist!
    eval path="${path}"            # Expand tilde
    path=$(readlink -f "${path}")  # Convert to absolute path
    echo "${path}"
} 
params="$(absolute "${params}")"
main="$(absolute "${main}")"
if [ "${test}" != "none" ] && [ "${test}" != "all" ]; then
    test="${this_dir}/tests/$(basename "${test}")"
fi

# Do the parameterfile, the main file and the test file exist?
if [ ! -f "${params}" ]; then
    colorprint "Error: Parameterfile \"${params}\" does not exist!" "red"
    exit 1
fi
if [ ! -f "${main}" ]; then
    colorprint "Error: Entry point \"${main}\" does not exist!" "red"
    exit 1
fi
if [ "${test}" != "none" ] && [ "${test}" != "all" ] && [ ! -d "${test}" ]; then
    colorprint "Error: Test \"${test}\" does not exist!" "red"
    exit 1
fi

# If a test is to be run, run it and exit
if [ "${test}" != "none" ]; then
    trap : 0
    if [ "${test}" == "all" ]; then
        for dir in "${this_dir}/tests/"*/; do
            dir=${dir%*/}
            colorprint "\nRunning $(basename ${dir}) test" "yellow"
            "${dir}/run_test"
        done
        colorprint "All tests ran successfully" "green"
    else
        colorprint "Running $(basename ${test}) test" "yellow"
        "${test}/run_test"
    fi
    exit 0
fi

# Relative path to the main and parameter, for clean printout
main_rel=$(${python} -c "from os.path import relpath; rel = relpath('${main}', '${concept_dir}'); print(rel if not rel.startswith('../../') else '${main}')")
params_rel=$(${python} -c "from os.path import relpath; rel = relpath('${params}', '${concept_dir}'); print(rel if not rel.startswith('../../') else '${params}')")
 
# Printout assigned values for unspecified parameters
if [ "${unspecified_nprocs}" == 1 ]; then
    echo "Number of processes not specified - Will use ${nprocs}"
fi
if [ "${unspecified_params}" == 1 ]; then
    echo "Parameterfile not specified - Will use \"${params_rel}\""
fi

# Compile or do cleanup from last compilation
if [ "${pure_python}" -eq 0 ] ; then
    # Compile with Cython
    (cd "${this_dir}" && make paramsfile="${params}")
else
    # Process the parsed parameterfile
    (cd "${this_dir}" && make params.py paramsfile="${params}" --silent)
    # Remove compiled Cython modules
    (cd "${this_dir}" && make clean_so paramsfile="${params}" >/dev/null)
fi

# Prompt the user for the secure shell password,
# if the live render should be uploaded.
cd "${this_dir}"
args=($("${python}" -B -c "
# Import parameters from the .py file rather than the .so file
import imp
params = imp.load_source('params', '${this_dir}/params.py')
vars = ('liverender', 'remote_liverender', 'protocol')
for var in vars:
    exec(var + ' = params.' + var)
# Other, normal imports
from getpass import getpass
import pexpect
# Ask for password, if upload is requested
password = ''
if liverender != '' and remote_liverender != '':
    # Get protocol authentication message
    if protocol == 'scp':
        cmd = 'scp \"${this_file}\" ' + remote_liverender
    elif protocol == 'sftp':
        cmd = 'sftp ' + remote_liverender
    else:
        raise Exception('Unknown protocol \"' + protocol + '\".')
    child = pexpect.spawn(cmd, timeout=10)
    msg = child.expect(['password.*', 'passphrase.*', pexpect.EOF, 'continue connecting'])
    prompt = ''
    if msg < 2:
        # Protocol asks for password or passphrase
        prompt = (child.before + child.after).decode('utf-8')
    elif msg == 3:
        # Protocol cannot authenticate host. Connect anyway
        child.sendline('yes')
        msg = child.expect(['password.*', 'passphrase.*', pexpect.EOF])
        if msg < 2:
            # Protocol asks for password or passphrase
            prompt = (child.before + child.after).decode('utf-8')
    child.terminate(force=True)
    # Prompt the user for the password/passphrase
    password = getpass('\nThe latest render will continuously be ' + protocol + '\'ed to '
                       + remote_liverender[(remote_liverender.find('@') + 1):] + '\n'
                       + prompt)
# Print out the password/passphrase.
# This will be captured in the bash 'args' variable.
print(password)
" "$@"))
password="${args[0]}"

# Create the logs dir and go to the code directory
mkdir -p "${this_dir}/logs"
cd "${this_dir}"

# Determine whether this script is run locally or remotely via ssh.
# Always treat tests as if they were run locally.
if [ "${local}" == 0 ] && [ "${test}" == "none" ] && ([ -n "${SSH_CLIENT}" ] || [ -n "${SSH_TTY}" ]); then
    remote=1
else
    remote=0
fi

# Either stop doing further actions, submit job or run it locally
if [ "${use_PBS}" -eq 0 ] && [ "${remote}" -eq 1 ]; then
    # Run remotely but do not use PBS
    printf "The ${terminal_CONCEPT} code is ready to be submitted"
    trap : 0
elif [ "${use_PBS}" -eq 1 ] && [ "${remote}" -eq 1 ]; then
    # Run remotely.
    # If no queue is explicitly chosen, use one with enough free nodes
    if [ "${queue}" == "none" ]; then
        # The first queue in the list is the default queue
        queue="${queues[0]}"
        ppn="${ppns[0]}"
        # Change to the queue that has enogh free CPUS to begin job immediately
        node_table=$(nodes)
        for i in $(eval echo "{0..${#queues[@]}}" | sed s/'\w*$'//); do
            free_nodes=$(echo "${node_table}" | grep -o -P "(?<= ${queues[${i}]}:).*(?= free)" | awk '{print $NF}')
            free_cpus=$(echo "$((${free_nodes} * ${ppns[${i}]}))")
            if [ "${free_cpus}" -ge "${nprocs}" ] && [ "$((${nprocs} % ${ppns[${i}]}))" -eq 0 ]; then
                queue="${queues[${i}]}"
                ppn="${ppns[${i}]}"
                break
            fi
        done
    else
        # How many CPUs does the explicitly chosen queue have per node?
        for i in $(eval echo "{0..${#queues[@]}}" | sed s/'\w*$'//); do
            if [ "${queue}" == "${queues[${i}]}" ]; then
                ppn="${ppns[${i}]}"
                break
            fi
        done
    fi
    # Check that the chosen queue can be run with all the node's CPUs in use
    if [ "$((${nprocs} % ${ppn}))" != 0 ]; then
        colorprint "Job submission refused:\nNo queue has the right amount of processors per node" "red"
        exit 1
    fi
    nodes="$((${nprocs} / ${ppn}))"
    # Write a jobscript file
    echo -e "#!/usr/bin/env bash
#PBS -N $(whoami):CONCEPT:$(basename ${params})
#PBS -q ${queue}
#PBS -l nodes=${nodes}:ppn=${ppn}
#PBS -l walltime=${walltime}:00:00
#PBS -o /dev/null
#PBS -e /dev/null

# Get the id of the current job
jobid=\"\${PBS_JOBID%.in1}\"

# Change to the logs directory, so that autogenerated files will be dumped there
cd \"${this_dir}/logs\"

# Source the run script
source \"${this_file}\"

# Print start messages
if [ ${pure_python} -eq 0 ]; then
    colorprint \"Running CONCEPT remotely on \$(hostname -f) as job \${jobid}\" \"yellow\" > \"${this_dir}/logs/\${jobid}\"
else
    colorprint \"Running CONCEPT in pure Python mode remotely on \$(hostname -f) as job \${jobid}\" \"yellow\" > \"${this_dir}/logs/\${jobid}\"
fi
echo \"Entry point:   \\\"${main_rel}\\\"\"    >> \"${this_dir}/logs/\${jobid}\"
echo \"Parameterfile: \\\"${params_rel}\\\"\"  >> \"${this_dir}/logs/\${jobid}\"
echo \"Logfile:       \\\"logs/\${jobid}\\\"\" >> \"${this_dir}/logs/\${jobid}\"
echo \"Nr. of CPUs:    ${nprocs}\"             >> \"${this_dir}/logs/\${jobid}\"

# Prepare Python options
if [ \"${pure_python}\" == \"0\" ]; then
    # Run as compiled library module
    main_as_library=\"$(basename "${main%.*}.so")\"
    m_flag=\"-m\"
else
    # Run as normal Python script
    main_as_library=\"${main}\"
    m_flag=\"\"
fi

# Run the code. Both stdout and stderr are being logged to logs/jobid,
# while the stderr alone is also logged to logs/jobid_err.
(cd \"${this_dir}\" && \"${mpiexec}\" \"${python}\" -B \${m_flag} \"\${main_as_library}\" \"${password}\" >> \"${this_dir}/logs/\${jobid}\" 2>> >(tee -a \"${this_dir}/logs/\${jobid}_err\"))

# Run complete. Remove error log if empty
if [ -f \"${this_dir}/logs/\${jobid}_err\" ] && [ ! -s \"${this_dir}/logs/\${jobid}_err\" ]; then
    rm \"${this_dir}/logs/\${jobid}_err\"
else
    colorprint \"\\\nSome warnings/errors occured during CONCEPT run!\" \"red\" >> \"${this_dir}/logs/\${jobid}\" 2>&1
    colorprint \"Check the following error log for more information:\" \"red\" >> \"${this_dir}/logs/\${jobid}\" 2>&1
    colorprint \"\\\"${this_dir}/logs/\${jobid}_err\\\"\" \"red\" >> \"${this_dir}/logs/\${jobid}\" 2>&1
fi
" > "${this_dir}/jobscript"
    # Submit the remote job from within the logs directory, so that autogenerated files will be dumped there
    jobid=$(cd "${this_dir}/logs" && qsub "${this_dir}/jobscript")
    jobid="${jobid%.in1}"
    colorprint "\nSubmitting job" "yellow"
    echo "Job ${jobid} submitted to queue ${queue}"
    echo "You can now kill (Ctrl-C) this script without cancelling the job"
    # Deactivate trap and call the watch script
    trap : 0
    "${this_dir}/utilities/watch" "${jobid}"
else
    # Run locally.
    # Construct a jobid that does not conflict with the content of the logs dir
    jobid=0
    while :; do
        if [ ! -f "${this_dir}/logs/${jobid}" ]; then
            break
        fi
        ((jobid += 1))
    done
    # Print start message
    echo
    if [ "${pure_python}" -eq 0 ]; then
        colorprint "Running CONCEPT" "yellow" | tee "${this_dir}/logs/${jobid}"
    else
        colorprint "Running CONCEPT in pure Python mode" "yellow" | tee "${this_dir}/logs/${jobid}"
    fi
    echo "Entry point:   \"${main_rel}\""   | tee -a "${this_dir}/logs/${jobid}"
    echo "Parameterfile: \"${params_rel}\"" | tee -a "${this_dir}/logs/${jobid}"
    echo "Logfile:       \"logs/${jobid}\"" | tee -a "${this_dir}/logs/${jobid}"
    echo "Nr. of CPUs:    ${nprocs}"        | tee -a "${this_dir}/logs/${jobid}"
    # Prepare Python options
    if [ "${pure_python}" -eq 0 ] ; then
        # Run as compiled library module
        main_as_library="$(basename "${main%.*}.so")"
        m_flag="-m"
    else
        # Run as normal Python script
        main_as_library="${main}"
        m_flag=""
    fi
    # Run the code. Print stdout and stderr to the terminal while at the
    # same time logging them to logs/jobid. The stderr alone is also
    # logged to logs/jobid_err.
    "${mpiexec}" -n "${nprocs}" "${python}" -B ${m_flag} "${main_as_library}" "${password}" 2> >(tee -a "${this_dir}/logs/${jobid}_err") | tee -a "${this_dir}/logs/${jobid}"
    # Get exit status of the above CONCEPT run
    concept_exit_status="${PIPESTATUS[0]}"
    # Run complete. Remove error log if empty
    if [ -f "${this_dir}/logs/${jobid}_err" ] && [ ! -s "${this_dir}/logs/${jobid}_err" ]; then
        rm "${this_dir}/logs/${jobid}_err"
    else
        colorprint "\nSome warnings/errors occured during CONCEPT run!" "red" 2>&1 | tee -a "${this_dir}/logs/${jobid}"
        colorprint "Check the following error log for more information:" "red" 2>&1 | tee -a "${this_dir}/logs/${jobid}"
        colorprint "\"${this_dir}/logs/${jobid}_err\"" "red" 2>&1 | tee -a "${this_dir}/logs/${jobid}"
    fi
    # If the CONCEPT run exited erroneously, exit now
    if [ "${concept_exit_status}" != "0" ]; then
        exit 1
    fi
    # Deactivate trap before exiting
    trap : 0
fi
