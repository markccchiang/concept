#!/bin/bash

# This script performs a compariosn test betwen the CONCEPT code in compiled
# and pure Python mode. ICs are generated randomly, containing 4**3 particles.

# The name of this test (the directory name)
this_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
test_name=$(basename "${this_dir}")

# Set up error trapping
ctrl_c()
{
    trap : 0
    exit 2
}
abort()
{
    printf "\e[1m\e[91mAn error occurred during ${test_name} test!\e[0m\n" >&2
    exit 1
}
trap 'ctrl_c' SIGINT
trap 'abort' EXIT
set -e

# Load paths from the .paths file
curr="${this_dir}"
while [ 1 ]; do
    if [ -f "${curr}/.paths" ]; then
        source "${curr}/.paths"
        break
    fi
    if [ "${curr}" == "/" ]; then
        printf "\e[1m\e[91mCould not find the .paths file!\e[0m\n" >&2
        exit 1
    fi
    curr="`dirname \"${curr}\"`"
done

# Create list of output times, used by both CONCEPT and GADGET
"${python}" -c "import numpy as np; np.savetxt('${this_dir}' + '/outputlist', [0.5, 1])"

# Create the Ewald grid using Cython, if it does not already exist
# (for fast IC generation).
"${run}" -n 1 -p "${this_dir}/params" --exit --local
# Generate ICs
"${run}" -n 1 -p "${this_dir}/params" -m "${this_dir}/generate_IC.py" --pure-python --local

# Run the CONCEPT code on the generated ICs
"${run}" -n 1 -p "${this_dir}/params" --local
mv "${this_dir}/output/snapshot_0" "${this_dir}/output/snapshot_cython"
# Remove all frames except the latest
(cd "${this_dir}/output" && (ls -t | grep "\.png" | head -n 1; ls| grep "\.png" ) | sort | uniq -u | xargs rm -f)
mv "${this_dir}/output/"*.png "${this_dir}/output/cython-png"

# Run the CONCEPT code in pure Python mode on the generated ICs, with 1, 2 and 4 processes.
# Keep only the latest frame
"${run}" -n 1 -p "${this_dir}/params" --pure-python --local
mv "${this_dir}/output/snapshot_0" "${this_dir}/output/snapshot_python_1"
(cd "${this_dir}/output" && (ls -t | grep "\.png" | head -n 1; ls| grep "\.png" ) | sort | uniq -u | xargs rm -f)
mv "${this_dir}/output/"*.png "${this_dir}/output/python_1-png"
"${run}" -n 2 -p "${this_dir}/params" --pure-python --local
mv "${this_dir}/output/snapshot_0" "${this_dir}/output/snapshot_python_2"
(cd "${this_dir}/output" && (ls -t | grep "\.png" | head -n 1; ls| grep "\.png" ) | sort | uniq -u | xargs rm -f)
mv "${this_dir}/output/"*.png "${this_dir}/output/python_2-png"
"${run}" -n 4 -p "${this_dir}/params" --pure-python --local
mv "${this_dir}/output/snapshot_0" "${this_dir}/output/snapshot_python_4"
(cd "${this_dir}/output" && (ls -t | grep "\.png" | head -n 1; ls| grep "\.png" ) | sort | uniq -u | xargs rm -f)
mv "${this_dir}/output/"*.png "${this_dir}/output/python_4-png"
mv "${this_dir}/output/cython-png" "${this_dir}/output/cython.png"
mv "${this_dir}/output/python_1-png" "${this_dir}/output/python_1.png"
mv "${this_dir}/output/python_2-png" "${this_dir}/output/python_2.png"
mv "${this_dir}/output/python_4-png" "${this_dir}/output/python_4.png"

# Analyze the output snapshots
"${run}" -n 1 -p "${this_dir}/params" -m "${this_dir}/analyze.py" --pure-python --local

# Test run complete. Deactivate trap before exiting.
trap : 0
printf "\e[1m\e[92m${test_name^} test ran successfully\e[0m\n"

